
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Company_industries
 * 
 */
export type Company_industries = $Result.DefaultSelection<Prisma.$Company_industriesPayload>
/**
 * Model Company_specialties
 * 
 */
export type Company_specialties = $Result.DefaultSelection<Prisma.$Company_specialtiesPayload>
/**
 * Model JobPostings
 * 
 */
export type JobPostings = $Result.DefaultSelection<Prisma.$JobPostingsPayload>
/**
 * Model JobPostings_jobSkills
 * 
 */
export type JobPostings_jobSkills = $Result.DefaultSelection<Prisma.$JobPostings_jobSkillsPayload>
/**
 * Model JobPostings_benefits
 * 
 */
export type JobPostings_benefits = $Result.DefaultSelection<Prisma.$JobPostings_benefitsPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model Candidate_mobileNumber
 * 
 */
export type Candidate_mobileNumber = $Result.DefaultSelection<Prisma.$Candidate_mobileNumberPayload>
/**
 * Model Candidate_candidateSkills
 * 
 */
export type Candidate_candidateSkills = $Result.DefaultSelection<Prisma.$Candidate_candidateSkillsPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.company.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.company.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.company_industries`: Exposes CRUD operations for the **Company_industries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_industries
    * const company_industries = await prisma.company_industries.findMany()
    * ```
    */
  get company_industries(): Prisma.Company_industriesDelegate<ExtArgs>;

  /**
   * `prisma.company_specialties`: Exposes CRUD operations for the **Company_specialties** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_specialties
    * const company_specialties = await prisma.company_specialties.findMany()
    * ```
    */
  get company_specialties(): Prisma.Company_specialtiesDelegate<ExtArgs>;

  /**
   * `prisma.jobPostings`: Exposes CRUD operations for the **JobPostings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPostings
    * const jobPostings = await prisma.jobPostings.findMany()
    * ```
    */
  get jobPostings(): Prisma.JobPostingsDelegate<ExtArgs>;

  /**
   * `prisma.jobPostings_jobSkills`: Exposes CRUD operations for the **JobPostings_jobSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPostings_jobSkills
    * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findMany()
    * ```
    */
  get jobPostings_jobSkills(): Prisma.JobPostings_jobSkillsDelegate<ExtArgs>;

  /**
   * `prisma.jobPostings_benefits`: Exposes CRUD operations for the **JobPostings_benefits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPostings_benefits
    * const jobPostings_benefits = await prisma.jobPostings_benefits.findMany()
    * ```
    */
  get jobPostings_benefits(): Prisma.JobPostings_benefitsDelegate<ExtArgs>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs>;

  /**
   * `prisma.candidate_mobileNumber`: Exposes CRUD operations for the **Candidate_mobileNumber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidate_mobileNumbers
    * const candidate_mobileNumbers = await prisma.candidate_mobileNumber.findMany()
    * ```
    */
  get candidate_mobileNumber(): Prisma.Candidate_mobileNumberDelegate<ExtArgs>;

  /**
   * `prisma.candidate_candidateSkills`: Exposes CRUD operations for the **Candidate_candidateSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidate_candidateSkills
    * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findMany()
    * ```
    */
  get candidate_candidateSkills(): Prisma.Candidate_candidateSkillsDelegate<ExtArgs>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Company: 'Company',
    Company_industries: 'Company_industries',
    Company_specialties: 'Company_specialties',
    JobPostings: 'JobPostings',
    JobPostings_jobSkills: 'JobPostings_jobSkills',
    JobPostings_benefits: 'JobPostings_benefits',
    Candidate: 'Candidate',
    Candidate_mobileNumber: 'Candidate_mobileNumber',
    Candidate_candidateSkills: 'Candidate_candidateSkills',
    Application: 'Application'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'company' | 'company_industries' | 'company_specialties' | 'jobPostings' | 'jobPostings_jobSkills' | 'jobPostings_benefits' | 'candidate' | 'candidate_mobileNumber' | 'candidate_candidateSkills' | 'application'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Company_industries: {
        payload: Prisma.$Company_industriesPayload<ExtArgs>
        fields: Prisma.Company_industriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Company_industriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Company_industriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>
          }
          findFirst: {
            args: Prisma.Company_industriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Company_industriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>
          }
          findMany: {
            args: Prisma.Company_industriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>[]
          }
          create: {
            args: Prisma.Company_industriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>
          }
          createMany: {
            args: Prisma.Company_industriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Company_industriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>
          }
          update: {
            args: Prisma.Company_industriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>
          }
          deleteMany: {
            args: Prisma.Company_industriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Company_industriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Company_industriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_industriesPayload>
          }
          aggregate: {
            args: Prisma.Company_industriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany_industries>
          }
          groupBy: {
            args: Prisma.Company_industriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Company_industriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.Company_industriesCountArgs<ExtArgs>,
            result: $Utils.Optional<Company_industriesCountAggregateOutputType> | number
          }
        }
      }
      Company_specialties: {
        payload: Prisma.$Company_specialtiesPayload<ExtArgs>
        fields: Prisma.Company_specialtiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Company_specialtiesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Company_specialtiesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>
          }
          findFirst: {
            args: Prisma.Company_specialtiesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Company_specialtiesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>
          }
          findMany: {
            args: Prisma.Company_specialtiesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>[]
          }
          create: {
            args: Prisma.Company_specialtiesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>
          }
          createMany: {
            args: Prisma.Company_specialtiesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Company_specialtiesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>
          }
          update: {
            args: Prisma.Company_specialtiesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>
          }
          deleteMany: {
            args: Prisma.Company_specialtiesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Company_specialtiesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Company_specialtiesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Company_specialtiesPayload>
          }
          aggregate: {
            args: Prisma.Company_specialtiesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany_specialties>
          }
          groupBy: {
            args: Prisma.Company_specialtiesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Company_specialtiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.Company_specialtiesCountArgs<ExtArgs>,
            result: $Utils.Optional<Company_specialtiesCountAggregateOutputType> | number
          }
        }
      }
      JobPostings: {
        payload: Prisma.$JobPostingsPayload<ExtArgs>
        fields: Prisma.JobPostingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPostingsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPostingsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>
          }
          findFirst: {
            args: Prisma.JobPostingsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPostingsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>
          }
          findMany: {
            args: Prisma.JobPostingsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>[]
          }
          create: {
            args: Prisma.JobPostingsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>
          }
          createMany: {
            args: Prisma.JobPostingsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JobPostingsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>
          }
          update: {
            args: Prisma.JobPostingsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>
          }
          deleteMany: {
            args: Prisma.JobPostingsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JobPostingsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JobPostingsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostingsPayload>
          }
          aggregate: {
            args: Prisma.JobPostingsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJobPostings>
          }
          groupBy: {
            args: Prisma.JobPostingsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JobPostingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPostingsCountArgs<ExtArgs>,
            result: $Utils.Optional<JobPostingsCountAggregateOutputType> | number
          }
        }
      }
      JobPostings_jobSkills: {
        payload: Prisma.$JobPostings_jobSkillsPayload<ExtArgs>
        fields: Prisma.JobPostings_jobSkillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPostings_jobSkillsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPostings_jobSkillsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>
          }
          findFirst: {
            args: Prisma.JobPostings_jobSkillsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPostings_jobSkillsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>
          }
          findMany: {
            args: Prisma.JobPostings_jobSkillsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>[]
          }
          create: {
            args: Prisma.JobPostings_jobSkillsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>
          }
          createMany: {
            args: Prisma.JobPostings_jobSkillsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JobPostings_jobSkillsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>
          }
          update: {
            args: Prisma.JobPostings_jobSkillsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>
          }
          deleteMany: {
            args: Prisma.JobPostings_jobSkillsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JobPostings_jobSkillsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JobPostings_jobSkillsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_jobSkillsPayload>
          }
          aggregate: {
            args: Prisma.JobPostings_jobSkillsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJobPostings_jobSkills>
          }
          groupBy: {
            args: Prisma.JobPostings_jobSkillsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JobPostings_jobSkillsGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPostings_jobSkillsCountArgs<ExtArgs>,
            result: $Utils.Optional<JobPostings_jobSkillsCountAggregateOutputType> | number
          }
        }
      }
      JobPostings_benefits: {
        payload: Prisma.$JobPostings_benefitsPayload<ExtArgs>
        fields: Prisma.JobPostings_benefitsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPostings_benefitsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPostings_benefitsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>
          }
          findFirst: {
            args: Prisma.JobPostings_benefitsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPostings_benefitsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>
          }
          findMany: {
            args: Prisma.JobPostings_benefitsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>[]
          }
          create: {
            args: Prisma.JobPostings_benefitsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>
          }
          createMany: {
            args: Prisma.JobPostings_benefitsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JobPostings_benefitsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>
          }
          update: {
            args: Prisma.JobPostings_benefitsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>
          }
          deleteMany: {
            args: Prisma.JobPostings_benefitsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JobPostings_benefitsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JobPostings_benefitsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobPostings_benefitsPayload>
          }
          aggregate: {
            args: Prisma.JobPostings_benefitsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJobPostings_benefits>
          }
          groupBy: {
            args: Prisma.JobPostings_benefitsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JobPostings_benefitsGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPostings_benefitsCountArgs<ExtArgs>,
            result: $Utils.Optional<JobPostings_benefitsCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>,
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      Candidate_mobileNumber: {
        payload: Prisma.$Candidate_mobileNumberPayload<ExtArgs>
        fields: Prisma.Candidate_mobileNumberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Candidate_mobileNumberFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Candidate_mobileNumberFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>
          }
          findFirst: {
            args: Prisma.Candidate_mobileNumberFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Candidate_mobileNumberFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>
          }
          findMany: {
            args: Prisma.Candidate_mobileNumberFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>[]
          }
          create: {
            args: Prisma.Candidate_mobileNumberCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>
          }
          createMany: {
            args: Prisma.Candidate_mobileNumberCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Candidate_mobileNumberDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>
          }
          update: {
            args: Prisma.Candidate_mobileNumberUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>
          }
          deleteMany: {
            args: Prisma.Candidate_mobileNumberDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Candidate_mobileNumberUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Candidate_mobileNumberUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_mobileNumberPayload>
          }
          aggregate: {
            args: Prisma.Candidate_mobileNumberAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidate_mobileNumber>
          }
          groupBy: {
            args: Prisma.Candidate_mobileNumberGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Candidate_mobileNumberGroupByOutputType>[]
          }
          count: {
            args: Prisma.Candidate_mobileNumberCountArgs<ExtArgs>,
            result: $Utils.Optional<Candidate_mobileNumberCountAggregateOutputType> | number
          }
        }
      }
      Candidate_candidateSkills: {
        payload: Prisma.$Candidate_candidateSkillsPayload<ExtArgs>
        fields: Prisma.Candidate_candidateSkillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Candidate_candidateSkillsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Candidate_candidateSkillsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>
          }
          findFirst: {
            args: Prisma.Candidate_candidateSkillsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Candidate_candidateSkillsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>
          }
          findMany: {
            args: Prisma.Candidate_candidateSkillsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>[]
          }
          create: {
            args: Prisma.Candidate_candidateSkillsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>
          }
          createMany: {
            args: Prisma.Candidate_candidateSkillsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Candidate_candidateSkillsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>
          }
          update: {
            args: Prisma.Candidate_candidateSkillsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>
          }
          deleteMany: {
            args: Prisma.Candidate_candidateSkillsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Candidate_candidateSkillsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Candidate_candidateSkillsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Candidate_candidateSkillsPayload>
          }
          aggregate: {
            args: Prisma.Candidate_candidateSkillsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidate_candidateSkills>
          }
          groupBy: {
            args: Prisma.Candidate_candidateSkillsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Candidate_candidateSkillsGroupByOutputType>[]
          }
          count: {
            args: Prisma.Candidate_candidateSkillsCountArgs<ExtArgs>,
            result: $Utils.Optional<Candidate_candidateSkillsCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    industries: number
    specialties: number
    JobPostings: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    industries?: boolean | CompanyCountOutputTypeCountIndustriesArgs
    specialties?: boolean | CompanyCountOutputTypeCountSpecialtiesArgs
    JobPostings?: boolean | CompanyCountOutputTypeCountJobPostingsArgs
  }

  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountIndustriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Company_industriesWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSpecialtiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Company_specialtiesWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingsWhereInput
  }



  /**
   * Count Type JobPostingsCountOutputType
   */

  export type JobPostingsCountOutputType = {
    jobSkills: number
    benefits: number
    Applications: number
  }

  export type JobPostingsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobSkills?: boolean | JobPostingsCountOutputTypeCountJobSkillsArgs
    benefits?: boolean | JobPostingsCountOutputTypeCountBenefitsArgs
    Applications?: boolean | JobPostingsCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes

  /**
   * JobPostingsCountOutputType without action
   */
  export type JobPostingsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostingsCountOutputType
     */
    select?: JobPostingsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * JobPostingsCountOutputType without action
   */
  export type JobPostingsCountOutputTypeCountJobSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostings_jobSkillsWhereInput
  }


  /**
   * JobPostingsCountOutputType without action
   */
  export type JobPostingsCountOutputTypeCountBenefitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostings_benefitsWhereInput
  }


  /**
   * JobPostingsCountOutputType without action
   */
  export type JobPostingsCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }



  /**
   * Count Type CandidateCountOutputType
   */

  export type CandidateCountOutputType = {
    mobileNumbers: number
    candidateSkills: number
    Applications: number
  }

  export type CandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mobileNumbers?: boolean | CandidateCountOutputTypeCountMobileNumbersArgs
    candidateSkills?: boolean | CandidateCountOutputTypeCountCandidateSkillsArgs
    Applications?: boolean | CandidateCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     */
    select?: CandidateCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountMobileNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Candidate_mobileNumberWhereInput
  }


  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountCandidateSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Candidate_candidateSkillsWhereInput
  }


  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    companyID: number | null
  }

  export type CompanySumAggregateOutputType = {
    companyID: bigint | null
  }

  export type CompanyMinAggregateOutputType = {
    companyID: bigint | null
    name: string | null
    description: string | null
    companySize: string | null
    state: string | null
    country: string | null
    address: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    companyID: bigint | null
    name: string | null
    description: string | null
    companySize: string | null
    state: string | null
    country: string | null
    address: string | null
  }

  export type CompanyCountAggregateOutputType = {
    companyID: number
    name: number
    description: number
    companySize: number
    state: number
    country: number
    address: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    companyID?: true
  }

  export type CompanySumAggregateInputType = {
    companyID?: true
  }

  export type CompanyMinAggregateInputType = {
    companyID?: true
    name?: true
    description?: true
    companySize?: true
    state?: true
    country?: true
    address?: true
  }

  export type CompanyMaxAggregateInputType = {
    companyID?: true
    name?: true
    description?: true
    companySize?: true
    state?: true
    country?: true
    address?: true
  }

  export type CompanyCountAggregateInputType = {
    companyID?: true
    name?: true
    description?: true
    companySize?: true
    state?: true
    country?: true
    address?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    companyID: bigint
    name: string
    description: string | null
    companySize: string | null
    state: string | null
    country: string | null
    address: string | null
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyID?: boolean
    name?: boolean
    description?: boolean
    companySize?: boolean
    state?: boolean
    country?: boolean
    address?: boolean
    industries?: boolean | Company$industriesArgs<ExtArgs>
    specialties?: boolean | Company$specialtiesArgs<ExtArgs>
    JobPostings?: boolean | Company$JobPostingsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    companyID?: boolean
    name?: boolean
    description?: boolean
    companySize?: boolean
    state?: boolean
    country?: boolean
    address?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    industries?: boolean | Company$industriesArgs<ExtArgs>
    specialties?: boolean | Company$specialtiesArgs<ExtArgs>
    JobPostings?: boolean | Company$JobPostingsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      industries: Prisma.$Company_industriesPayload<ExtArgs>[]
      specialties: Prisma.$Company_specialtiesPayload<ExtArgs>[]
      JobPostings: Prisma.$JobPostingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      companyID: bigint
      name: string
      description: string | null
      companySize: string | null
      state: string | null
      country: string | null
      address: string | null
    }, ExtArgs["result"]["company"]>
    composites: {}
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `companyID`
     * const companyWithCompanyIDOnly = await prisma.company.findMany({ select: { companyID: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    industries<T extends Company$industriesArgs<ExtArgs> = {}>(args?: Subset<T, Company$industriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    specialties<T extends Company$specialtiesArgs<ExtArgs> = {}>(args?: Subset<T, Company$specialtiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'findMany'> | Null>;

    JobPostings<T extends Company$JobPostingsArgs<ExtArgs> = {}>(args?: Subset<T, Company$JobPostingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly companyID: FieldRef<"Company", 'BigInt'>
    readonly name: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly companySize: FieldRef<"Company", 'String'>
    readonly state: FieldRef<"Company", 'String'>
    readonly country: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.industries
   */
  export type Company$industriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    where?: Company_industriesWhereInput
    orderBy?: Company_industriesOrderByWithRelationInput | Company_industriesOrderByWithRelationInput[]
    cursor?: Company_industriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Company_industriesScalarFieldEnum | Company_industriesScalarFieldEnum[]
  }


  /**
   * Company.specialties
   */
  export type Company$specialtiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    where?: Company_specialtiesWhereInput
    orderBy?: Company_specialtiesOrderByWithRelationInput | Company_specialtiesOrderByWithRelationInput[]
    cursor?: Company_specialtiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Company_specialtiesScalarFieldEnum | Company_specialtiesScalarFieldEnum[]
  }


  /**
   * Company.JobPostings
   */
  export type Company$JobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    where?: JobPostingsWhereInput
    orderBy?: JobPostingsOrderByWithRelationInput | JobPostingsOrderByWithRelationInput[]
    cursor?: JobPostingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostingsScalarFieldEnum | JobPostingsScalarFieldEnum[]
  }


  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
  }



  /**
   * Model Company_industries
   */

  export type AggregateCompany_industries = {
    _count: Company_industriesCountAggregateOutputType | null
    _avg: Company_industriesAvgAggregateOutputType | null
    _sum: Company_industriesSumAggregateOutputType | null
    _min: Company_industriesMinAggregateOutputType | null
    _max: Company_industriesMaxAggregateOutputType | null
  }

  export type Company_industriesAvgAggregateOutputType = {
    companyID: number | null
  }

  export type Company_industriesSumAggregateOutputType = {
    companyID: bigint | null
  }

  export type Company_industriesMinAggregateOutputType = {
    companyID: bigint | null
    industry: string | null
  }

  export type Company_industriesMaxAggregateOutputType = {
    companyID: bigint | null
    industry: string | null
  }

  export type Company_industriesCountAggregateOutputType = {
    companyID: number
    industry: number
    _all: number
  }


  export type Company_industriesAvgAggregateInputType = {
    companyID?: true
  }

  export type Company_industriesSumAggregateInputType = {
    companyID?: true
  }

  export type Company_industriesMinAggregateInputType = {
    companyID?: true
    industry?: true
  }

  export type Company_industriesMaxAggregateInputType = {
    companyID?: true
    industry?: true
  }

  export type Company_industriesCountAggregateInputType = {
    companyID?: true
    industry?: true
    _all?: true
  }

  export type Company_industriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company_industries to aggregate.
     */
    where?: Company_industriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_industries to fetch.
     */
    orderBy?: Company_industriesOrderByWithRelationInput | Company_industriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Company_industriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_industries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Company_industries
    **/
    _count?: true | Company_industriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Company_industriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Company_industriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Company_industriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Company_industriesMaxAggregateInputType
  }

  export type GetCompany_industriesAggregateType<T extends Company_industriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany_industries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany_industries[P]>
      : GetScalarType<T[P], AggregateCompany_industries[P]>
  }




  export type Company_industriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Company_industriesWhereInput
    orderBy?: Company_industriesOrderByWithAggregationInput | Company_industriesOrderByWithAggregationInput[]
    by: Company_industriesScalarFieldEnum[] | Company_industriesScalarFieldEnum
    having?: Company_industriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Company_industriesCountAggregateInputType | true
    _avg?: Company_industriesAvgAggregateInputType
    _sum?: Company_industriesSumAggregateInputType
    _min?: Company_industriesMinAggregateInputType
    _max?: Company_industriesMaxAggregateInputType
  }

  export type Company_industriesGroupByOutputType = {
    companyID: bigint
    industry: string
    _count: Company_industriesCountAggregateOutputType | null
    _avg: Company_industriesAvgAggregateOutputType | null
    _sum: Company_industriesSumAggregateOutputType | null
    _min: Company_industriesMinAggregateOutputType | null
    _max: Company_industriesMaxAggregateOutputType | null
  }

  type GetCompany_industriesGroupByPayload<T extends Company_industriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Company_industriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Company_industriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Company_industriesGroupByOutputType[P]>
            : GetScalarType<T[P], Company_industriesGroupByOutputType[P]>
        }
      >
    >


  export type Company_industriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyID?: boolean
    industry?: boolean
    Company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company_industries"]>

  export type Company_industriesSelectScalar = {
    companyID?: boolean
    industry?: boolean
  }

  export type Company_industriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $Company_industriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company_industries"
    objects: {
      Company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      companyID: bigint
      industry: string
    }, ExtArgs["result"]["company_industries"]>
    composites: {}
  }


  type Company_industriesGetPayload<S extends boolean | null | undefined | Company_industriesDefaultArgs> = $Result.GetResult<Prisma.$Company_industriesPayload, S>

  type Company_industriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Company_industriesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Company_industriesCountAggregateInputType | true
    }

  export interface Company_industriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company_industries'], meta: { name: 'Company_industries' } }
    /**
     * Find zero or one Company_industries that matches the filter.
     * @param {Company_industriesFindUniqueArgs} args - Arguments to find a Company_industries
     * @example
     * // Get one Company_industries
     * const company_industries = await prisma.company_industries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Company_industriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Company_industriesFindUniqueArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company_industries that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Company_industriesFindUniqueOrThrowArgs} args - Arguments to find a Company_industries
     * @example
     * // Get one Company_industries
     * const company_industries = await prisma.company_industries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Company_industriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_industriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company_industries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesFindFirstArgs} args - Arguments to find a Company_industries
     * @example
     * // Get one Company_industries
     * const company_industries = await prisma.company_industries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Company_industriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_industriesFindFirstArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company_industries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesFindFirstOrThrowArgs} args - Arguments to find a Company_industries
     * @example
     * // Get one Company_industries
     * const company_industries = await prisma.company_industries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Company_industriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_industriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Company_industries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_industries
     * const company_industries = await prisma.company_industries.findMany()
     * 
     * // Get first 10 Company_industries
     * const company_industries = await prisma.company_industries.findMany({ take: 10 })
     * 
     * // Only select the `companyID`
     * const company_industriesWithCompanyIDOnly = await prisma.company_industries.findMany({ select: { companyID: true } })
     * 
    **/
    findMany<T extends Company_industriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_industriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company_industries.
     * @param {Company_industriesCreateArgs} args - Arguments to create a Company_industries.
     * @example
     * // Create one Company_industries
     * const Company_industries = await prisma.company_industries.create({
     *   data: {
     *     // ... data to create a Company_industries
     *   }
     * })
     * 
    **/
    create<T extends Company_industriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Company_industriesCreateArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Company_industries.
     *     @param {Company_industriesCreateManyArgs} args - Arguments to create many Company_industries.
     *     @example
     *     // Create many Company_industries
     *     const company_industries = await prisma.company_industries.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Company_industriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_industriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company_industries.
     * @param {Company_industriesDeleteArgs} args - Arguments to delete one Company_industries.
     * @example
     * // Delete one Company_industries
     * const Company_industries = await prisma.company_industries.delete({
     *   where: {
     *     // ... filter to delete one Company_industries
     *   }
     * })
     * 
    **/
    delete<T extends Company_industriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Company_industriesDeleteArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company_industries.
     * @param {Company_industriesUpdateArgs} args - Arguments to update one Company_industries.
     * @example
     * // Update one Company_industries
     * const company_industries = await prisma.company_industries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Company_industriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Company_industriesUpdateArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Company_industries.
     * @param {Company_industriesDeleteManyArgs} args - Arguments to filter Company_industries to delete.
     * @example
     * // Delete a few Company_industries
     * const { count } = await prisma.company_industries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Company_industriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_industriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Company_industries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_industries
     * const company_industries = await prisma.company_industries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Company_industriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Company_industriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company_industries.
     * @param {Company_industriesUpsertArgs} args - Arguments to update or create a Company_industries.
     * @example
     * // Update or create a Company_industries
     * const company_industries = await prisma.company_industries.upsert({
     *   create: {
     *     // ... data to create a Company_industries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_industries we want to update
     *   }
     * })
    **/
    upsert<T extends Company_industriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Company_industriesUpsertArgs<ExtArgs>>
    ): Prisma__Company_industriesClient<$Result.GetResult<Prisma.$Company_industriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Company_industries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesCountArgs} args - Arguments to filter Company_industries to count.
     * @example
     * // Count the number of Company_industries
     * const count = await prisma.company_industries.count({
     *   where: {
     *     // ... the filter for the Company_industries we want to count
     *   }
     * })
    **/
    count<T extends Company_industriesCountArgs>(
      args?: Subset<T, Company_industriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Company_industriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company_industries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Company_industriesAggregateArgs>(args: Subset<T, Company_industriesAggregateArgs>): Prisma.PrismaPromise<GetCompany_industriesAggregateType<T>>

    /**
     * Group by Company_industries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_industriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Company_industriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Company_industriesGroupByArgs['orderBy'] }
        : { orderBy?: Company_industriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Company_industriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompany_industriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company_industries model
   */
  readonly fields: Company_industriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company_industries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Company_industriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company_industries model
   */ 
  interface Company_industriesFieldRefs {
    readonly companyID: FieldRef<"Company_industries", 'BigInt'>
    readonly industry: FieldRef<"Company_industries", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Company_industries findUnique
   */
  export type Company_industriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * Filter, which Company_industries to fetch.
     */
    where: Company_industriesWhereUniqueInput
  }


  /**
   * Company_industries findUniqueOrThrow
   */
  export type Company_industriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * Filter, which Company_industries to fetch.
     */
    where: Company_industriesWhereUniqueInput
  }


  /**
   * Company_industries findFirst
   */
  export type Company_industriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * Filter, which Company_industries to fetch.
     */
    where?: Company_industriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_industries to fetch.
     */
    orderBy?: Company_industriesOrderByWithRelationInput | Company_industriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Company_industries.
     */
    cursor?: Company_industriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_industries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Company_industries.
     */
    distinct?: Company_industriesScalarFieldEnum | Company_industriesScalarFieldEnum[]
  }


  /**
   * Company_industries findFirstOrThrow
   */
  export type Company_industriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * Filter, which Company_industries to fetch.
     */
    where?: Company_industriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_industries to fetch.
     */
    orderBy?: Company_industriesOrderByWithRelationInput | Company_industriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Company_industries.
     */
    cursor?: Company_industriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_industries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Company_industries.
     */
    distinct?: Company_industriesScalarFieldEnum | Company_industriesScalarFieldEnum[]
  }


  /**
   * Company_industries findMany
   */
  export type Company_industriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * Filter, which Company_industries to fetch.
     */
    where?: Company_industriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_industries to fetch.
     */
    orderBy?: Company_industriesOrderByWithRelationInput | Company_industriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Company_industries.
     */
    cursor?: Company_industriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_industries.
     */
    skip?: number
    distinct?: Company_industriesScalarFieldEnum | Company_industriesScalarFieldEnum[]
  }


  /**
   * Company_industries create
   */
  export type Company_industriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * The data needed to create a Company_industries.
     */
    data: XOR<Company_industriesCreateInput, Company_industriesUncheckedCreateInput>
  }


  /**
   * Company_industries createMany
   */
  export type Company_industriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Company_industries.
     */
    data: Company_industriesCreateManyInput | Company_industriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Company_industries update
   */
  export type Company_industriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * The data needed to update a Company_industries.
     */
    data: XOR<Company_industriesUpdateInput, Company_industriesUncheckedUpdateInput>
    /**
     * Choose, which Company_industries to update.
     */
    where: Company_industriesWhereUniqueInput
  }


  /**
   * Company_industries updateMany
   */
  export type Company_industriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Company_industries.
     */
    data: XOR<Company_industriesUpdateManyMutationInput, Company_industriesUncheckedUpdateManyInput>
    /**
     * Filter which Company_industries to update
     */
    where?: Company_industriesWhereInput
  }


  /**
   * Company_industries upsert
   */
  export type Company_industriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * The filter to search for the Company_industries to update in case it exists.
     */
    where: Company_industriesWhereUniqueInput
    /**
     * In case the Company_industries found by the `where` argument doesn't exist, create a new Company_industries with this data.
     */
    create: XOR<Company_industriesCreateInput, Company_industriesUncheckedCreateInput>
    /**
     * In case the Company_industries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Company_industriesUpdateInput, Company_industriesUncheckedUpdateInput>
  }


  /**
   * Company_industries delete
   */
  export type Company_industriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
    /**
     * Filter which Company_industries to delete.
     */
    where: Company_industriesWhereUniqueInput
  }


  /**
   * Company_industries deleteMany
   */
  export type Company_industriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company_industries to delete
     */
    where?: Company_industriesWhereInput
  }


  /**
   * Company_industries without action
   */
  export type Company_industriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_industries
     */
    select?: Company_industriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_industriesInclude<ExtArgs> | null
  }



  /**
   * Model Company_specialties
   */

  export type AggregateCompany_specialties = {
    _count: Company_specialtiesCountAggregateOutputType | null
    _avg: Company_specialtiesAvgAggregateOutputType | null
    _sum: Company_specialtiesSumAggregateOutputType | null
    _min: Company_specialtiesMinAggregateOutputType | null
    _max: Company_specialtiesMaxAggregateOutputType | null
  }

  export type Company_specialtiesAvgAggregateOutputType = {
    companyID: number | null
  }

  export type Company_specialtiesSumAggregateOutputType = {
    companyID: bigint | null
  }

  export type Company_specialtiesMinAggregateOutputType = {
    companyID: bigint | null
    specialty: string | null
  }

  export type Company_specialtiesMaxAggregateOutputType = {
    companyID: bigint | null
    specialty: string | null
  }

  export type Company_specialtiesCountAggregateOutputType = {
    companyID: number
    specialty: number
    _all: number
  }


  export type Company_specialtiesAvgAggregateInputType = {
    companyID?: true
  }

  export type Company_specialtiesSumAggregateInputType = {
    companyID?: true
  }

  export type Company_specialtiesMinAggregateInputType = {
    companyID?: true
    specialty?: true
  }

  export type Company_specialtiesMaxAggregateInputType = {
    companyID?: true
    specialty?: true
  }

  export type Company_specialtiesCountAggregateInputType = {
    companyID?: true
    specialty?: true
    _all?: true
  }

  export type Company_specialtiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company_specialties to aggregate.
     */
    where?: Company_specialtiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_specialties to fetch.
     */
    orderBy?: Company_specialtiesOrderByWithRelationInput | Company_specialtiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Company_specialtiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_specialties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_specialties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Company_specialties
    **/
    _count?: true | Company_specialtiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Company_specialtiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Company_specialtiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Company_specialtiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Company_specialtiesMaxAggregateInputType
  }

  export type GetCompany_specialtiesAggregateType<T extends Company_specialtiesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany_specialties]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany_specialties[P]>
      : GetScalarType<T[P], AggregateCompany_specialties[P]>
  }




  export type Company_specialtiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Company_specialtiesWhereInput
    orderBy?: Company_specialtiesOrderByWithAggregationInput | Company_specialtiesOrderByWithAggregationInput[]
    by: Company_specialtiesScalarFieldEnum[] | Company_specialtiesScalarFieldEnum
    having?: Company_specialtiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Company_specialtiesCountAggregateInputType | true
    _avg?: Company_specialtiesAvgAggregateInputType
    _sum?: Company_specialtiesSumAggregateInputType
    _min?: Company_specialtiesMinAggregateInputType
    _max?: Company_specialtiesMaxAggregateInputType
  }

  export type Company_specialtiesGroupByOutputType = {
    companyID: bigint
    specialty: string
    _count: Company_specialtiesCountAggregateOutputType | null
    _avg: Company_specialtiesAvgAggregateOutputType | null
    _sum: Company_specialtiesSumAggregateOutputType | null
    _min: Company_specialtiesMinAggregateOutputType | null
    _max: Company_specialtiesMaxAggregateOutputType | null
  }

  type GetCompany_specialtiesGroupByPayload<T extends Company_specialtiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Company_specialtiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Company_specialtiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Company_specialtiesGroupByOutputType[P]>
            : GetScalarType<T[P], Company_specialtiesGroupByOutputType[P]>
        }
      >
    >


  export type Company_specialtiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyID?: boolean
    specialty?: boolean
    Company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company_specialties"]>

  export type Company_specialtiesSelectScalar = {
    companyID?: boolean
    specialty?: boolean
  }

  export type Company_specialtiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $Company_specialtiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company_specialties"
    objects: {
      Company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      companyID: bigint
      specialty: string
    }, ExtArgs["result"]["company_specialties"]>
    composites: {}
  }


  type Company_specialtiesGetPayload<S extends boolean | null | undefined | Company_specialtiesDefaultArgs> = $Result.GetResult<Prisma.$Company_specialtiesPayload, S>

  type Company_specialtiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Company_specialtiesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Company_specialtiesCountAggregateInputType | true
    }

  export interface Company_specialtiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company_specialties'], meta: { name: 'Company_specialties' } }
    /**
     * Find zero or one Company_specialties that matches the filter.
     * @param {Company_specialtiesFindUniqueArgs} args - Arguments to find a Company_specialties
     * @example
     * // Get one Company_specialties
     * const company_specialties = await prisma.company_specialties.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Company_specialtiesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Company_specialtiesFindUniqueArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company_specialties that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Company_specialtiesFindUniqueOrThrowArgs} args - Arguments to find a Company_specialties
     * @example
     * // Get one Company_specialties
     * const company_specialties = await prisma.company_specialties.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Company_specialtiesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_specialtiesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company_specialties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesFindFirstArgs} args - Arguments to find a Company_specialties
     * @example
     * // Get one Company_specialties
     * const company_specialties = await prisma.company_specialties.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Company_specialtiesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_specialtiesFindFirstArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company_specialties that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesFindFirstOrThrowArgs} args - Arguments to find a Company_specialties
     * @example
     * // Get one Company_specialties
     * const company_specialties = await prisma.company_specialties.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Company_specialtiesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_specialtiesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Company_specialties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_specialties
     * const company_specialties = await prisma.company_specialties.findMany()
     * 
     * // Get first 10 Company_specialties
     * const company_specialties = await prisma.company_specialties.findMany({ take: 10 })
     * 
     * // Only select the `companyID`
     * const company_specialtiesWithCompanyIDOnly = await prisma.company_specialties.findMany({ select: { companyID: true } })
     * 
    **/
    findMany<T extends Company_specialtiesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_specialtiesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company_specialties.
     * @param {Company_specialtiesCreateArgs} args - Arguments to create a Company_specialties.
     * @example
     * // Create one Company_specialties
     * const Company_specialties = await prisma.company_specialties.create({
     *   data: {
     *     // ... data to create a Company_specialties
     *   }
     * })
     * 
    **/
    create<T extends Company_specialtiesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Company_specialtiesCreateArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Company_specialties.
     *     @param {Company_specialtiesCreateManyArgs} args - Arguments to create many Company_specialties.
     *     @example
     *     // Create many Company_specialties
     *     const company_specialties = await prisma.company_specialties.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Company_specialtiesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_specialtiesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company_specialties.
     * @param {Company_specialtiesDeleteArgs} args - Arguments to delete one Company_specialties.
     * @example
     * // Delete one Company_specialties
     * const Company_specialties = await prisma.company_specialties.delete({
     *   where: {
     *     // ... filter to delete one Company_specialties
     *   }
     * })
     * 
    **/
    delete<T extends Company_specialtiesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Company_specialtiesDeleteArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company_specialties.
     * @param {Company_specialtiesUpdateArgs} args - Arguments to update one Company_specialties.
     * @example
     * // Update one Company_specialties
     * const company_specialties = await prisma.company_specialties.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Company_specialtiesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Company_specialtiesUpdateArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Company_specialties.
     * @param {Company_specialtiesDeleteManyArgs} args - Arguments to filter Company_specialties to delete.
     * @example
     * // Delete a few Company_specialties
     * const { count } = await prisma.company_specialties.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Company_specialtiesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Company_specialtiesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Company_specialties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_specialties
     * const company_specialties = await prisma.company_specialties.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Company_specialtiesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Company_specialtiesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company_specialties.
     * @param {Company_specialtiesUpsertArgs} args - Arguments to update or create a Company_specialties.
     * @example
     * // Update or create a Company_specialties
     * const company_specialties = await prisma.company_specialties.upsert({
     *   create: {
     *     // ... data to create a Company_specialties
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_specialties we want to update
     *   }
     * })
    **/
    upsert<T extends Company_specialtiesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Company_specialtiesUpsertArgs<ExtArgs>>
    ): Prisma__Company_specialtiesClient<$Result.GetResult<Prisma.$Company_specialtiesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Company_specialties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesCountArgs} args - Arguments to filter Company_specialties to count.
     * @example
     * // Count the number of Company_specialties
     * const count = await prisma.company_specialties.count({
     *   where: {
     *     // ... the filter for the Company_specialties we want to count
     *   }
     * })
    **/
    count<T extends Company_specialtiesCountArgs>(
      args?: Subset<T, Company_specialtiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Company_specialtiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company_specialties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Company_specialtiesAggregateArgs>(args: Subset<T, Company_specialtiesAggregateArgs>): Prisma.PrismaPromise<GetCompany_specialtiesAggregateType<T>>

    /**
     * Group by Company_specialties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_specialtiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Company_specialtiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Company_specialtiesGroupByArgs['orderBy'] }
        : { orderBy?: Company_specialtiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Company_specialtiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompany_specialtiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company_specialties model
   */
  readonly fields: Company_specialtiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company_specialties.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Company_specialtiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company_specialties model
   */ 
  interface Company_specialtiesFieldRefs {
    readonly companyID: FieldRef<"Company_specialties", 'BigInt'>
    readonly specialty: FieldRef<"Company_specialties", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Company_specialties findUnique
   */
  export type Company_specialtiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * Filter, which Company_specialties to fetch.
     */
    where: Company_specialtiesWhereUniqueInput
  }


  /**
   * Company_specialties findUniqueOrThrow
   */
  export type Company_specialtiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * Filter, which Company_specialties to fetch.
     */
    where: Company_specialtiesWhereUniqueInput
  }


  /**
   * Company_specialties findFirst
   */
  export type Company_specialtiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * Filter, which Company_specialties to fetch.
     */
    where?: Company_specialtiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_specialties to fetch.
     */
    orderBy?: Company_specialtiesOrderByWithRelationInput | Company_specialtiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Company_specialties.
     */
    cursor?: Company_specialtiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_specialties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_specialties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Company_specialties.
     */
    distinct?: Company_specialtiesScalarFieldEnum | Company_specialtiesScalarFieldEnum[]
  }


  /**
   * Company_specialties findFirstOrThrow
   */
  export type Company_specialtiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * Filter, which Company_specialties to fetch.
     */
    where?: Company_specialtiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_specialties to fetch.
     */
    orderBy?: Company_specialtiesOrderByWithRelationInput | Company_specialtiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Company_specialties.
     */
    cursor?: Company_specialtiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_specialties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_specialties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Company_specialties.
     */
    distinct?: Company_specialtiesScalarFieldEnum | Company_specialtiesScalarFieldEnum[]
  }


  /**
   * Company_specialties findMany
   */
  export type Company_specialtiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * Filter, which Company_specialties to fetch.
     */
    where?: Company_specialtiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Company_specialties to fetch.
     */
    orderBy?: Company_specialtiesOrderByWithRelationInput | Company_specialtiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Company_specialties.
     */
    cursor?: Company_specialtiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Company_specialties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Company_specialties.
     */
    skip?: number
    distinct?: Company_specialtiesScalarFieldEnum | Company_specialtiesScalarFieldEnum[]
  }


  /**
   * Company_specialties create
   */
  export type Company_specialtiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * The data needed to create a Company_specialties.
     */
    data: XOR<Company_specialtiesCreateInput, Company_specialtiesUncheckedCreateInput>
  }


  /**
   * Company_specialties createMany
   */
  export type Company_specialtiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Company_specialties.
     */
    data: Company_specialtiesCreateManyInput | Company_specialtiesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Company_specialties update
   */
  export type Company_specialtiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * The data needed to update a Company_specialties.
     */
    data: XOR<Company_specialtiesUpdateInput, Company_specialtiesUncheckedUpdateInput>
    /**
     * Choose, which Company_specialties to update.
     */
    where: Company_specialtiesWhereUniqueInput
  }


  /**
   * Company_specialties updateMany
   */
  export type Company_specialtiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Company_specialties.
     */
    data: XOR<Company_specialtiesUpdateManyMutationInput, Company_specialtiesUncheckedUpdateManyInput>
    /**
     * Filter which Company_specialties to update
     */
    where?: Company_specialtiesWhereInput
  }


  /**
   * Company_specialties upsert
   */
  export type Company_specialtiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * The filter to search for the Company_specialties to update in case it exists.
     */
    where: Company_specialtiesWhereUniqueInput
    /**
     * In case the Company_specialties found by the `where` argument doesn't exist, create a new Company_specialties with this data.
     */
    create: XOR<Company_specialtiesCreateInput, Company_specialtiesUncheckedCreateInput>
    /**
     * In case the Company_specialties was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Company_specialtiesUpdateInput, Company_specialtiesUncheckedUpdateInput>
  }


  /**
   * Company_specialties delete
   */
  export type Company_specialtiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
    /**
     * Filter which Company_specialties to delete.
     */
    where: Company_specialtiesWhereUniqueInput
  }


  /**
   * Company_specialties deleteMany
   */
  export type Company_specialtiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company_specialties to delete
     */
    where?: Company_specialtiesWhereInput
  }


  /**
   * Company_specialties without action
   */
  export type Company_specialtiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company_specialties
     */
    select?: Company_specialtiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Company_specialtiesInclude<ExtArgs> | null
  }



  /**
   * Model JobPostings
   */

  export type AggregateJobPostings = {
    _count: JobPostingsCountAggregateOutputType | null
    _avg: JobPostingsAvgAggregateOutputType | null
    _sum: JobPostingsSumAggregateOutputType | null
    _min: JobPostingsMinAggregateOutputType | null
    _max: JobPostingsMaxAggregateOutputType | null
  }

  export type JobPostingsAvgAggregateOutputType = {
    jobID: number | null
    companyID: number | null
    salary: number | null
  }

  export type JobPostingsSumAggregateOutputType = {
    jobID: bigint | null
    companyID: bigint | null
    salary: number | null
  }

  export type JobPostingsMinAggregateOutputType = {
    jobID: bigint | null
    companyID: bigint | null
    title: string | null
    description: string | null
    salary: number | null
    jobPostURL: string | null
    location: string | null
    experienceLevel: string | null
    workType: string | null
  }

  export type JobPostingsMaxAggregateOutputType = {
    jobID: bigint | null
    companyID: bigint | null
    title: string | null
    description: string | null
    salary: number | null
    jobPostURL: string | null
    location: string | null
    experienceLevel: string | null
    workType: string | null
  }

  export type JobPostingsCountAggregateOutputType = {
    jobID: number
    companyID: number
    title: number
    description: number
    salary: number
    jobPostURL: number
    location: number
    experienceLevel: number
    workType: number
    _all: number
  }


  export type JobPostingsAvgAggregateInputType = {
    jobID?: true
    companyID?: true
    salary?: true
  }

  export type JobPostingsSumAggregateInputType = {
    jobID?: true
    companyID?: true
    salary?: true
  }

  export type JobPostingsMinAggregateInputType = {
    jobID?: true
    companyID?: true
    title?: true
    description?: true
    salary?: true
    jobPostURL?: true
    location?: true
    experienceLevel?: true
    workType?: true
  }

  export type JobPostingsMaxAggregateInputType = {
    jobID?: true
    companyID?: true
    title?: true
    description?: true
    salary?: true
    jobPostURL?: true
    location?: true
    experienceLevel?: true
    workType?: true
  }

  export type JobPostingsCountAggregateInputType = {
    jobID?: true
    companyID?: true
    title?: true
    description?: true
    salary?: true
    jobPostURL?: true
    location?: true
    experienceLevel?: true
    workType?: true
    _all?: true
  }

  export type JobPostingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings to aggregate.
     */
    where?: JobPostingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingsOrderByWithRelationInput | JobPostingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPostingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPostings
    **/
    _count?: true | JobPostingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobPostingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobPostingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPostingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPostingsMaxAggregateInputType
  }

  export type GetJobPostingsAggregateType<T extends JobPostingsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPostings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPostings[P]>
      : GetScalarType<T[P], AggregateJobPostings[P]>
  }




  export type JobPostingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingsWhereInput
    orderBy?: JobPostingsOrderByWithAggregationInput | JobPostingsOrderByWithAggregationInput[]
    by: JobPostingsScalarFieldEnum[] | JobPostingsScalarFieldEnum
    having?: JobPostingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPostingsCountAggregateInputType | true
    _avg?: JobPostingsAvgAggregateInputType
    _sum?: JobPostingsSumAggregateInputType
    _min?: JobPostingsMinAggregateInputType
    _max?: JobPostingsMaxAggregateInputType
  }

  export type JobPostingsGroupByOutputType = {
    jobID: bigint
    companyID: bigint
    title: string
    description: string | null
    salary: number | null
    jobPostURL: string | null
    location: string | null
    experienceLevel: string | null
    workType: string | null
    _count: JobPostingsCountAggregateOutputType | null
    _avg: JobPostingsAvgAggregateOutputType | null
    _sum: JobPostingsSumAggregateOutputType | null
    _min: JobPostingsMinAggregateOutputType | null
    _max: JobPostingsMaxAggregateOutputType | null
  }

  type GetJobPostingsGroupByPayload<T extends JobPostingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPostingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPostingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPostingsGroupByOutputType[P]>
            : GetScalarType<T[P], JobPostingsGroupByOutputType[P]>
        }
      >
    >


  export type JobPostingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    jobID?: boolean
    companyID?: boolean
    title?: boolean
    description?: boolean
    salary?: boolean
    jobPostURL?: boolean
    location?: boolean
    experienceLevel?: boolean
    workType?: boolean
    Company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobSkills?: boolean | JobPostings$jobSkillsArgs<ExtArgs>
    benefits?: boolean | JobPostings$benefitsArgs<ExtArgs>
    Applications?: boolean | JobPostings$ApplicationsArgs<ExtArgs>
    _count?: boolean | JobPostingsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPostings"]>

  export type JobPostingsSelectScalar = {
    jobID?: boolean
    companyID?: boolean
    title?: boolean
    description?: boolean
    salary?: boolean
    jobPostURL?: boolean
    location?: boolean
    experienceLevel?: boolean
    workType?: boolean
  }

  export type JobPostingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobSkills?: boolean | JobPostings$jobSkillsArgs<ExtArgs>
    benefits?: boolean | JobPostings$benefitsArgs<ExtArgs>
    Applications?: boolean | JobPostings$ApplicationsArgs<ExtArgs>
    _count?: boolean | JobPostingsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $JobPostingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPostings"
    objects: {
      Company: Prisma.$CompanyPayload<ExtArgs>
      jobSkills: Prisma.$JobPostings_jobSkillsPayload<ExtArgs>[]
      benefits: Prisma.$JobPostings_benefitsPayload<ExtArgs>[]
      Applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      jobID: bigint
      companyID: bigint
      title: string
      description: string | null
      salary: number | null
      jobPostURL: string | null
      location: string | null
      experienceLevel: string | null
      workType: string | null
    }, ExtArgs["result"]["jobPostings"]>
    composites: {}
  }


  type JobPostingsGetPayload<S extends boolean | null | undefined | JobPostingsDefaultArgs> = $Result.GetResult<Prisma.$JobPostingsPayload, S>

  type JobPostingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobPostingsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: JobPostingsCountAggregateInputType | true
    }

  export interface JobPostingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPostings'], meta: { name: 'JobPostings' } }
    /**
     * Find zero or one JobPostings that matches the filter.
     * @param {JobPostingsFindUniqueArgs} args - Arguments to find a JobPostings
     * @example
     * // Get one JobPostings
     * const jobPostings = await prisma.jobPostings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobPostingsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostingsFindUniqueArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one JobPostings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JobPostingsFindUniqueOrThrowArgs} args - Arguments to find a JobPostings
     * @example
     * // Get one JobPostings
     * const jobPostings = await prisma.jobPostings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JobPostingsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostingsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first JobPostings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsFindFirstArgs} args - Arguments to find a JobPostings
     * @example
     * // Get one JobPostings
     * const jobPostings = await prisma.jobPostings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobPostingsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostingsFindFirstArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first JobPostings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsFindFirstOrThrowArgs} args - Arguments to find a JobPostings
     * @example
     * // Get one JobPostings
     * const jobPostings = await prisma.jobPostings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JobPostingsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostingsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more JobPostings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPostings
     * const jobPostings = await prisma.jobPostings.findMany()
     * 
     * // Get first 10 JobPostings
     * const jobPostings = await prisma.jobPostings.findMany({ take: 10 })
     * 
     * // Only select the `jobID`
     * const jobPostingsWithJobIDOnly = await prisma.jobPostings.findMany({ select: { jobID: true } })
     * 
    **/
    findMany<T extends JobPostingsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostingsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a JobPostings.
     * @param {JobPostingsCreateArgs} args - Arguments to create a JobPostings.
     * @example
     * // Create one JobPostings
     * const JobPostings = await prisma.jobPostings.create({
     *   data: {
     *     // ... data to create a JobPostings
     *   }
     * })
     * 
    **/
    create<T extends JobPostingsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostingsCreateArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many JobPostings.
     *     @param {JobPostingsCreateManyArgs} args - Arguments to create many JobPostings.
     *     @example
     *     // Create many JobPostings
     *     const jobPostings = await prisma.jobPostings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobPostingsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostingsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobPostings.
     * @param {JobPostingsDeleteArgs} args - Arguments to delete one JobPostings.
     * @example
     * // Delete one JobPostings
     * const JobPostings = await prisma.jobPostings.delete({
     *   where: {
     *     // ... filter to delete one JobPostings
     *   }
     * })
     * 
    **/
    delete<T extends JobPostingsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostingsDeleteArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one JobPostings.
     * @param {JobPostingsUpdateArgs} args - Arguments to update one JobPostings.
     * @example
     * // Update one JobPostings
     * const jobPostings = await prisma.jobPostings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobPostingsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostingsUpdateArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more JobPostings.
     * @param {JobPostingsDeleteManyArgs} args - Arguments to filter JobPostings to delete.
     * @example
     * // Delete a few JobPostings
     * const { count } = await prisma.jobPostings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobPostingsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostingsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPostings
     * const jobPostings = await prisma.jobPostings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobPostingsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostingsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobPostings.
     * @param {JobPostingsUpsertArgs} args - Arguments to update or create a JobPostings.
     * @example
     * // Update or create a JobPostings
     * const jobPostings = await prisma.jobPostings.upsert({
     *   create: {
     *     // ... data to create a JobPostings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPostings we want to update
     *   }
     * })
    **/
    upsert<T extends JobPostingsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostingsUpsertArgs<ExtArgs>>
    ): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsCountArgs} args - Arguments to filter JobPostings to count.
     * @example
     * // Count the number of JobPostings
     * const count = await prisma.jobPostings.count({
     *   where: {
     *     // ... the filter for the JobPostings we want to count
     *   }
     * })
    **/
    count<T extends JobPostingsCountArgs>(
      args?: Subset<T, JobPostingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPostingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPostingsAggregateArgs>(args: Subset<T, JobPostingsAggregateArgs>): Prisma.PrismaPromise<GetJobPostingsAggregateType<T>>

    /**
     * Group by JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPostingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPostingsGroupByArgs['orderBy'] }
        : { orderBy?: JobPostingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPostingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPostingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPostings model
   */
  readonly fields: JobPostingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPostings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPostingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    jobSkills<T extends JobPostings$jobSkillsArgs<ExtArgs> = {}>(args?: Subset<T, JobPostings$jobSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'findMany'> | Null>;

    benefits<T extends JobPostings$benefitsArgs<ExtArgs> = {}>(args?: Subset<T, JobPostings$benefitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Applications<T extends JobPostings$ApplicationsArgs<ExtArgs> = {}>(args?: Subset<T, JobPostings$ApplicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the JobPostings model
   */ 
  interface JobPostingsFieldRefs {
    readonly jobID: FieldRef<"JobPostings", 'BigInt'>
    readonly companyID: FieldRef<"JobPostings", 'BigInt'>
    readonly title: FieldRef<"JobPostings", 'String'>
    readonly description: FieldRef<"JobPostings", 'String'>
    readonly salary: FieldRef<"JobPostings", 'Float'>
    readonly jobPostURL: FieldRef<"JobPostings", 'String'>
    readonly location: FieldRef<"JobPostings", 'String'>
    readonly experienceLevel: FieldRef<"JobPostings", 'String'>
    readonly workType: FieldRef<"JobPostings", 'String'>
  }
    

  // Custom InputTypes

  /**
   * JobPostings findUnique
   */
  export type JobPostingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where: JobPostingsWhereUniqueInput
  }


  /**
   * JobPostings findUniqueOrThrow
   */
  export type JobPostingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where: JobPostingsWhereUniqueInput
  }


  /**
   * JobPostings findFirst
   */
  export type JobPostingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where?: JobPostingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingsOrderByWithRelationInput | JobPostingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingsScalarFieldEnum | JobPostingsScalarFieldEnum[]
  }


  /**
   * JobPostings findFirstOrThrow
   */
  export type JobPostingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where?: JobPostingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingsOrderByWithRelationInput | JobPostingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingsScalarFieldEnum | JobPostingsScalarFieldEnum[]
  }


  /**
   * JobPostings findMany
   */
  export type JobPostingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where?: JobPostingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingsOrderByWithRelationInput | JobPostingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPostings.
     */
    cursor?: JobPostingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    distinct?: JobPostingsScalarFieldEnum | JobPostingsScalarFieldEnum[]
  }


  /**
   * JobPostings create
   */
  export type JobPostingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPostings.
     */
    data: XOR<JobPostingsCreateInput, JobPostingsUncheckedCreateInput>
  }


  /**
   * JobPostings createMany
   */
  export type JobPostingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingsCreateManyInput | JobPostingsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * JobPostings update
   */
  export type JobPostingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPostings.
     */
    data: XOR<JobPostingsUpdateInput, JobPostingsUncheckedUpdateInput>
    /**
     * Choose, which JobPostings to update.
     */
    where: JobPostingsWhereUniqueInput
  }


  /**
   * JobPostings updateMany
   */
  export type JobPostingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPostings.
     */
    data: XOR<JobPostingsUpdateManyMutationInput, JobPostingsUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings to update
     */
    where?: JobPostingsWhereInput
  }


  /**
   * JobPostings upsert
   */
  export type JobPostingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPostings to update in case it exists.
     */
    where: JobPostingsWhereUniqueInput
    /**
     * In case the JobPostings found by the `where` argument doesn't exist, create a new JobPostings with this data.
     */
    create: XOR<JobPostingsCreateInput, JobPostingsUncheckedCreateInput>
    /**
     * In case the JobPostings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPostingsUpdateInput, JobPostingsUncheckedUpdateInput>
  }


  /**
   * JobPostings delete
   */
  export type JobPostingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
    /**
     * Filter which JobPostings to delete.
     */
    where: JobPostingsWhereUniqueInput
  }


  /**
   * JobPostings deleteMany
   */
  export type JobPostingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings to delete
     */
    where?: JobPostingsWhereInput
  }


  /**
   * JobPostings.jobSkills
   */
  export type JobPostings$jobSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    where?: JobPostings_jobSkillsWhereInput
    orderBy?: JobPostings_jobSkillsOrderByWithRelationInput | JobPostings_jobSkillsOrderByWithRelationInput[]
    cursor?: JobPostings_jobSkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostings_jobSkillsScalarFieldEnum | JobPostings_jobSkillsScalarFieldEnum[]
  }


  /**
   * JobPostings.benefits
   */
  export type JobPostings$benefitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    where?: JobPostings_benefitsWhereInput
    orderBy?: JobPostings_benefitsOrderByWithRelationInput | JobPostings_benefitsOrderByWithRelationInput[]
    cursor?: JobPostings_benefitsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostings_benefitsScalarFieldEnum | JobPostings_benefitsScalarFieldEnum[]
  }


  /**
   * JobPostings.Applications
   */
  export type JobPostings$ApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * JobPostings without action
   */
  export type JobPostingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings
     */
    select?: JobPostingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostingsInclude<ExtArgs> | null
  }



  /**
   * Model JobPostings_jobSkills
   */

  export type AggregateJobPostings_jobSkills = {
    _count: JobPostings_jobSkillsCountAggregateOutputType | null
    _avg: JobPostings_jobSkillsAvgAggregateOutputType | null
    _sum: JobPostings_jobSkillsSumAggregateOutputType | null
    _min: JobPostings_jobSkillsMinAggregateOutputType | null
    _max: JobPostings_jobSkillsMaxAggregateOutputType | null
  }

  export type JobPostings_jobSkillsAvgAggregateOutputType = {
    jobID: number | null
  }

  export type JobPostings_jobSkillsSumAggregateOutputType = {
    jobID: bigint | null
  }

  export type JobPostings_jobSkillsMinAggregateOutputType = {
    jobID: bigint | null
    jobSkills: string | null
  }

  export type JobPostings_jobSkillsMaxAggregateOutputType = {
    jobID: bigint | null
    jobSkills: string | null
  }

  export type JobPostings_jobSkillsCountAggregateOutputType = {
    jobID: number
    jobSkills: number
    _all: number
  }


  export type JobPostings_jobSkillsAvgAggregateInputType = {
    jobID?: true
  }

  export type JobPostings_jobSkillsSumAggregateInputType = {
    jobID?: true
  }

  export type JobPostings_jobSkillsMinAggregateInputType = {
    jobID?: true
    jobSkills?: true
  }

  export type JobPostings_jobSkillsMaxAggregateInputType = {
    jobID?: true
    jobSkills?: true
  }

  export type JobPostings_jobSkillsCountAggregateInputType = {
    jobID?: true
    jobSkills?: true
    _all?: true
  }

  export type JobPostings_jobSkillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings_jobSkills to aggregate.
     */
    where?: JobPostings_jobSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_jobSkills to fetch.
     */
    orderBy?: JobPostings_jobSkillsOrderByWithRelationInput | JobPostings_jobSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPostings_jobSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_jobSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_jobSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPostings_jobSkills
    **/
    _count?: true | JobPostings_jobSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobPostings_jobSkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobPostings_jobSkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPostings_jobSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPostings_jobSkillsMaxAggregateInputType
  }

  export type GetJobPostings_jobSkillsAggregateType<T extends JobPostings_jobSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPostings_jobSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPostings_jobSkills[P]>
      : GetScalarType<T[P], AggregateJobPostings_jobSkills[P]>
  }




  export type JobPostings_jobSkillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostings_jobSkillsWhereInput
    orderBy?: JobPostings_jobSkillsOrderByWithAggregationInput | JobPostings_jobSkillsOrderByWithAggregationInput[]
    by: JobPostings_jobSkillsScalarFieldEnum[] | JobPostings_jobSkillsScalarFieldEnum
    having?: JobPostings_jobSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPostings_jobSkillsCountAggregateInputType | true
    _avg?: JobPostings_jobSkillsAvgAggregateInputType
    _sum?: JobPostings_jobSkillsSumAggregateInputType
    _min?: JobPostings_jobSkillsMinAggregateInputType
    _max?: JobPostings_jobSkillsMaxAggregateInputType
  }

  export type JobPostings_jobSkillsGroupByOutputType = {
    jobID: bigint
    jobSkills: string
    _count: JobPostings_jobSkillsCountAggregateOutputType | null
    _avg: JobPostings_jobSkillsAvgAggregateOutputType | null
    _sum: JobPostings_jobSkillsSumAggregateOutputType | null
    _min: JobPostings_jobSkillsMinAggregateOutputType | null
    _max: JobPostings_jobSkillsMaxAggregateOutputType | null
  }

  type GetJobPostings_jobSkillsGroupByPayload<T extends JobPostings_jobSkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPostings_jobSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPostings_jobSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPostings_jobSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], JobPostings_jobSkillsGroupByOutputType[P]>
        }
      >
    >


  export type JobPostings_jobSkillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    jobID?: boolean
    jobSkills?: boolean
    JobPostings?: boolean | JobPostingsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPostings_jobSkills"]>

  export type JobPostings_jobSkillsSelectScalar = {
    jobID?: boolean
    jobSkills?: boolean
  }

  export type JobPostings_jobSkillsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    JobPostings?: boolean | JobPostingsDefaultArgs<ExtArgs>
  }


  export type $JobPostings_jobSkillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPostings_jobSkills"
    objects: {
      JobPostings: Prisma.$JobPostingsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      jobID: bigint
      jobSkills: string
    }, ExtArgs["result"]["jobPostings_jobSkills"]>
    composites: {}
  }


  type JobPostings_jobSkillsGetPayload<S extends boolean | null | undefined | JobPostings_jobSkillsDefaultArgs> = $Result.GetResult<Prisma.$JobPostings_jobSkillsPayload, S>

  type JobPostings_jobSkillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobPostings_jobSkillsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: JobPostings_jobSkillsCountAggregateInputType | true
    }

  export interface JobPostings_jobSkillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPostings_jobSkills'], meta: { name: 'JobPostings_jobSkills' } }
    /**
     * Find zero or one JobPostings_jobSkills that matches the filter.
     * @param {JobPostings_jobSkillsFindUniqueArgs} args - Arguments to find a JobPostings_jobSkills
     * @example
     * // Get one JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobPostings_jobSkillsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_jobSkillsFindUniqueArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one JobPostings_jobSkills that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JobPostings_jobSkillsFindUniqueOrThrowArgs} args - Arguments to find a JobPostings_jobSkills
     * @example
     * // Get one JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JobPostings_jobSkillsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_jobSkillsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first JobPostings_jobSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsFindFirstArgs} args - Arguments to find a JobPostings_jobSkills
     * @example
     * // Get one JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobPostings_jobSkillsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_jobSkillsFindFirstArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first JobPostings_jobSkills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsFindFirstOrThrowArgs} args - Arguments to find a JobPostings_jobSkills
     * @example
     * // Get one JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JobPostings_jobSkillsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_jobSkillsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more JobPostings_jobSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findMany()
     * 
     * // Get first 10 JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.findMany({ take: 10 })
     * 
     * // Only select the `jobID`
     * const jobPostings_jobSkillsWithJobIDOnly = await prisma.jobPostings_jobSkills.findMany({ select: { jobID: true } })
     * 
    **/
    findMany<T extends JobPostings_jobSkillsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_jobSkillsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a JobPostings_jobSkills.
     * @param {JobPostings_jobSkillsCreateArgs} args - Arguments to create a JobPostings_jobSkills.
     * @example
     * // Create one JobPostings_jobSkills
     * const JobPostings_jobSkills = await prisma.jobPostings_jobSkills.create({
     *   data: {
     *     // ... data to create a JobPostings_jobSkills
     *   }
     * })
     * 
    **/
    create<T extends JobPostings_jobSkillsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_jobSkillsCreateArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many JobPostings_jobSkills.
     *     @param {JobPostings_jobSkillsCreateManyArgs} args - Arguments to create many JobPostings_jobSkills.
     *     @example
     *     // Create many JobPostings_jobSkills
     *     const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobPostings_jobSkillsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_jobSkillsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobPostings_jobSkills.
     * @param {JobPostings_jobSkillsDeleteArgs} args - Arguments to delete one JobPostings_jobSkills.
     * @example
     * // Delete one JobPostings_jobSkills
     * const JobPostings_jobSkills = await prisma.jobPostings_jobSkills.delete({
     *   where: {
     *     // ... filter to delete one JobPostings_jobSkills
     *   }
     * })
     * 
    **/
    delete<T extends JobPostings_jobSkillsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_jobSkillsDeleteArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one JobPostings_jobSkills.
     * @param {JobPostings_jobSkillsUpdateArgs} args - Arguments to update one JobPostings_jobSkills.
     * @example
     * // Update one JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobPostings_jobSkillsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_jobSkillsUpdateArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more JobPostings_jobSkills.
     * @param {JobPostings_jobSkillsDeleteManyArgs} args - Arguments to filter JobPostings_jobSkills to delete.
     * @example
     * // Delete a few JobPostings_jobSkills
     * const { count } = await prisma.jobPostings_jobSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobPostings_jobSkillsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_jobSkillsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings_jobSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobPostings_jobSkillsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_jobSkillsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobPostings_jobSkills.
     * @param {JobPostings_jobSkillsUpsertArgs} args - Arguments to update or create a JobPostings_jobSkills.
     * @example
     * // Update or create a JobPostings_jobSkills
     * const jobPostings_jobSkills = await prisma.jobPostings_jobSkills.upsert({
     *   create: {
     *     // ... data to create a JobPostings_jobSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPostings_jobSkills we want to update
     *   }
     * })
    **/
    upsert<T extends JobPostings_jobSkillsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_jobSkillsUpsertArgs<ExtArgs>>
    ): Prisma__JobPostings_jobSkillsClient<$Result.GetResult<Prisma.$JobPostings_jobSkillsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of JobPostings_jobSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsCountArgs} args - Arguments to filter JobPostings_jobSkills to count.
     * @example
     * // Count the number of JobPostings_jobSkills
     * const count = await prisma.jobPostings_jobSkills.count({
     *   where: {
     *     // ... the filter for the JobPostings_jobSkills we want to count
     *   }
     * })
    **/
    count<T extends JobPostings_jobSkillsCountArgs>(
      args?: Subset<T, JobPostings_jobSkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPostings_jobSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPostings_jobSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPostings_jobSkillsAggregateArgs>(args: Subset<T, JobPostings_jobSkillsAggregateArgs>): Prisma.PrismaPromise<GetJobPostings_jobSkillsAggregateType<T>>

    /**
     * Group by JobPostings_jobSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_jobSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPostings_jobSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPostings_jobSkillsGroupByArgs['orderBy'] }
        : { orderBy?: JobPostings_jobSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPostings_jobSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPostings_jobSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPostings_jobSkills model
   */
  readonly fields: JobPostings_jobSkillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPostings_jobSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPostings_jobSkillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    JobPostings<T extends JobPostingsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingsDefaultArgs<ExtArgs>>): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the JobPostings_jobSkills model
   */ 
  interface JobPostings_jobSkillsFieldRefs {
    readonly jobID: FieldRef<"JobPostings_jobSkills", 'BigInt'>
    readonly jobSkills: FieldRef<"JobPostings_jobSkills", 'String'>
  }
    

  // Custom InputTypes

  /**
   * JobPostings_jobSkills findUnique
   */
  export type JobPostings_jobSkillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_jobSkills to fetch.
     */
    where: JobPostings_jobSkillsWhereUniqueInput
  }


  /**
   * JobPostings_jobSkills findUniqueOrThrow
   */
  export type JobPostings_jobSkillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_jobSkills to fetch.
     */
    where: JobPostings_jobSkillsWhereUniqueInput
  }


  /**
   * JobPostings_jobSkills findFirst
   */
  export type JobPostings_jobSkillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_jobSkills to fetch.
     */
    where?: JobPostings_jobSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_jobSkills to fetch.
     */
    orderBy?: JobPostings_jobSkillsOrderByWithRelationInput | JobPostings_jobSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings_jobSkills.
     */
    cursor?: JobPostings_jobSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_jobSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_jobSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings_jobSkills.
     */
    distinct?: JobPostings_jobSkillsScalarFieldEnum | JobPostings_jobSkillsScalarFieldEnum[]
  }


  /**
   * JobPostings_jobSkills findFirstOrThrow
   */
  export type JobPostings_jobSkillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_jobSkills to fetch.
     */
    where?: JobPostings_jobSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_jobSkills to fetch.
     */
    orderBy?: JobPostings_jobSkillsOrderByWithRelationInput | JobPostings_jobSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings_jobSkills.
     */
    cursor?: JobPostings_jobSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_jobSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_jobSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings_jobSkills.
     */
    distinct?: JobPostings_jobSkillsScalarFieldEnum | JobPostings_jobSkillsScalarFieldEnum[]
  }


  /**
   * JobPostings_jobSkills findMany
   */
  export type JobPostings_jobSkillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_jobSkills to fetch.
     */
    where?: JobPostings_jobSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_jobSkills to fetch.
     */
    orderBy?: JobPostings_jobSkillsOrderByWithRelationInput | JobPostings_jobSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPostings_jobSkills.
     */
    cursor?: JobPostings_jobSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_jobSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_jobSkills.
     */
    skip?: number
    distinct?: JobPostings_jobSkillsScalarFieldEnum | JobPostings_jobSkillsScalarFieldEnum[]
  }


  /**
   * JobPostings_jobSkills create
   */
  export type JobPostings_jobSkillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPostings_jobSkills.
     */
    data: XOR<JobPostings_jobSkillsCreateInput, JobPostings_jobSkillsUncheckedCreateInput>
  }


  /**
   * JobPostings_jobSkills createMany
   */
  export type JobPostings_jobSkillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPostings_jobSkills.
     */
    data: JobPostings_jobSkillsCreateManyInput | JobPostings_jobSkillsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * JobPostings_jobSkills update
   */
  export type JobPostings_jobSkillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPostings_jobSkills.
     */
    data: XOR<JobPostings_jobSkillsUpdateInput, JobPostings_jobSkillsUncheckedUpdateInput>
    /**
     * Choose, which JobPostings_jobSkills to update.
     */
    where: JobPostings_jobSkillsWhereUniqueInput
  }


  /**
   * JobPostings_jobSkills updateMany
   */
  export type JobPostings_jobSkillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPostings_jobSkills.
     */
    data: XOR<JobPostings_jobSkillsUpdateManyMutationInput, JobPostings_jobSkillsUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings_jobSkills to update
     */
    where?: JobPostings_jobSkillsWhereInput
  }


  /**
   * JobPostings_jobSkills upsert
   */
  export type JobPostings_jobSkillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPostings_jobSkills to update in case it exists.
     */
    where: JobPostings_jobSkillsWhereUniqueInput
    /**
     * In case the JobPostings_jobSkills found by the `where` argument doesn't exist, create a new JobPostings_jobSkills with this data.
     */
    create: XOR<JobPostings_jobSkillsCreateInput, JobPostings_jobSkillsUncheckedCreateInput>
    /**
     * In case the JobPostings_jobSkills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPostings_jobSkillsUpdateInput, JobPostings_jobSkillsUncheckedUpdateInput>
  }


  /**
   * JobPostings_jobSkills delete
   */
  export type JobPostings_jobSkillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
    /**
     * Filter which JobPostings_jobSkills to delete.
     */
    where: JobPostings_jobSkillsWhereUniqueInput
  }


  /**
   * JobPostings_jobSkills deleteMany
   */
  export type JobPostings_jobSkillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings_jobSkills to delete
     */
    where?: JobPostings_jobSkillsWhereInput
  }


  /**
   * JobPostings_jobSkills without action
   */
  export type JobPostings_jobSkillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_jobSkills
     */
    select?: JobPostings_jobSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_jobSkillsInclude<ExtArgs> | null
  }



  /**
   * Model JobPostings_benefits
   */

  export type AggregateJobPostings_benefits = {
    _count: JobPostings_benefitsCountAggregateOutputType | null
    _avg: JobPostings_benefitsAvgAggregateOutputType | null
    _sum: JobPostings_benefitsSumAggregateOutputType | null
    _min: JobPostings_benefitsMinAggregateOutputType | null
    _max: JobPostings_benefitsMaxAggregateOutputType | null
  }

  export type JobPostings_benefitsAvgAggregateOutputType = {
    jobID: number | null
  }

  export type JobPostings_benefitsSumAggregateOutputType = {
    jobID: bigint | null
  }

  export type JobPostings_benefitsMinAggregateOutputType = {
    jobID: bigint | null
    benefits: string | null
  }

  export type JobPostings_benefitsMaxAggregateOutputType = {
    jobID: bigint | null
    benefits: string | null
  }

  export type JobPostings_benefitsCountAggregateOutputType = {
    jobID: number
    benefits: number
    _all: number
  }


  export type JobPostings_benefitsAvgAggregateInputType = {
    jobID?: true
  }

  export type JobPostings_benefitsSumAggregateInputType = {
    jobID?: true
  }

  export type JobPostings_benefitsMinAggregateInputType = {
    jobID?: true
    benefits?: true
  }

  export type JobPostings_benefitsMaxAggregateInputType = {
    jobID?: true
    benefits?: true
  }

  export type JobPostings_benefitsCountAggregateInputType = {
    jobID?: true
    benefits?: true
    _all?: true
  }

  export type JobPostings_benefitsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings_benefits to aggregate.
     */
    where?: JobPostings_benefitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_benefits to fetch.
     */
    orderBy?: JobPostings_benefitsOrderByWithRelationInput | JobPostings_benefitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPostings_benefitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_benefits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_benefits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPostings_benefits
    **/
    _count?: true | JobPostings_benefitsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobPostings_benefitsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobPostings_benefitsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPostings_benefitsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPostings_benefitsMaxAggregateInputType
  }

  export type GetJobPostings_benefitsAggregateType<T extends JobPostings_benefitsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPostings_benefits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPostings_benefits[P]>
      : GetScalarType<T[P], AggregateJobPostings_benefits[P]>
  }




  export type JobPostings_benefitsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostings_benefitsWhereInput
    orderBy?: JobPostings_benefitsOrderByWithAggregationInput | JobPostings_benefitsOrderByWithAggregationInput[]
    by: JobPostings_benefitsScalarFieldEnum[] | JobPostings_benefitsScalarFieldEnum
    having?: JobPostings_benefitsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPostings_benefitsCountAggregateInputType | true
    _avg?: JobPostings_benefitsAvgAggregateInputType
    _sum?: JobPostings_benefitsSumAggregateInputType
    _min?: JobPostings_benefitsMinAggregateInputType
    _max?: JobPostings_benefitsMaxAggregateInputType
  }

  export type JobPostings_benefitsGroupByOutputType = {
    jobID: bigint
    benefits: string
    _count: JobPostings_benefitsCountAggregateOutputType | null
    _avg: JobPostings_benefitsAvgAggregateOutputType | null
    _sum: JobPostings_benefitsSumAggregateOutputType | null
    _min: JobPostings_benefitsMinAggregateOutputType | null
    _max: JobPostings_benefitsMaxAggregateOutputType | null
  }

  type GetJobPostings_benefitsGroupByPayload<T extends JobPostings_benefitsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPostings_benefitsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPostings_benefitsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPostings_benefitsGroupByOutputType[P]>
            : GetScalarType<T[P], JobPostings_benefitsGroupByOutputType[P]>
        }
      >
    >


  export type JobPostings_benefitsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    jobID?: boolean
    benefits?: boolean
    JobPostings?: boolean | JobPostingsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPostings_benefits"]>

  export type JobPostings_benefitsSelectScalar = {
    jobID?: boolean
    benefits?: boolean
  }

  export type JobPostings_benefitsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    JobPostings?: boolean | JobPostingsDefaultArgs<ExtArgs>
  }


  export type $JobPostings_benefitsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPostings_benefits"
    objects: {
      JobPostings: Prisma.$JobPostingsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      jobID: bigint
      benefits: string
    }, ExtArgs["result"]["jobPostings_benefits"]>
    composites: {}
  }


  type JobPostings_benefitsGetPayload<S extends boolean | null | undefined | JobPostings_benefitsDefaultArgs> = $Result.GetResult<Prisma.$JobPostings_benefitsPayload, S>

  type JobPostings_benefitsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobPostings_benefitsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: JobPostings_benefitsCountAggregateInputType | true
    }

  export interface JobPostings_benefitsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPostings_benefits'], meta: { name: 'JobPostings_benefits' } }
    /**
     * Find zero or one JobPostings_benefits that matches the filter.
     * @param {JobPostings_benefitsFindUniqueArgs} args - Arguments to find a JobPostings_benefits
     * @example
     * // Get one JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobPostings_benefitsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_benefitsFindUniqueArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one JobPostings_benefits that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JobPostings_benefitsFindUniqueOrThrowArgs} args - Arguments to find a JobPostings_benefits
     * @example
     * // Get one JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JobPostings_benefitsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_benefitsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first JobPostings_benefits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsFindFirstArgs} args - Arguments to find a JobPostings_benefits
     * @example
     * // Get one JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobPostings_benefitsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_benefitsFindFirstArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first JobPostings_benefits that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsFindFirstOrThrowArgs} args - Arguments to find a JobPostings_benefits
     * @example
     * // Get one JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JobPostings_benefitsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_benefitsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more JobPostings_benefits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.findMany()
     * 
     * // Get first 10 JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.findMany({ take: 10 })
     * 
     * // Only select the `jobID`
     * const jobPostings_benefitsWithJobIDOnly = await prisma.jobPostings_benefits.findMany({ select: { jobID: true } })
     * 
    **/
    findMany<T extends JobPostings_benefitsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_benefitsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a JobPostings_benefits.
     * @param {JobPostings_benefitsCreateArgs} args - Arguments to create a JobPostings_benefits.
     * @example
     * // Create one JobPostings_benefits
     * const JobPostings_benefits = await prisma.jobPostings_benefits.create({
     *   data: {
     *     // ... data to create a JobPostings_benefits
     *   }
     * })
     * 
    **/
    create<T extends JobPostings_benefitsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_benefitsCreateArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many JobPostings_benefits.
     *     @param {JobPostings_benefitsCreateManyArgs} args - Arguments to create many JobPostings_benefits.
     *     @example
     *     // Create many JobPostings_benefits
     *     const jobPostings_benefits = await prisma.jobPostings_benefits.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobPostings_benefitsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_benefitsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobPostings_benefits.
     * @param {JobPostings_benefitsDeleteArgs} args - Arguments to delete one JobPostings_benefits.
     * @example
     * // Delete one JobPostings_benefits
     * const JobPostings_benefits = await prisma.jobPostings_benefits.delete({
     *   where: {
     *     // ... filter to delete one JobPostings_benefits
     *   }
     * })
     * 
    **/
    delete<T extends JobPostings_benefitsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_benefitsDeleteArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one JobPostings_benefits.
     * @param {JobPostings_benefitsUpdateArgs} args - Arguments to update one JobPostings_benefits.
     * @example
     * // Update one JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobPostings_benefitsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_benefitsUpdateArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more JobPostings_benefits.
     * @param {JobPostings_benefitsDeleteManyArgs} args - Arguments to filter JobPostings_benefits to delete.
     * @example
     * // Delete a few JobPostings_benefits
     * const { count } = await prisma.jobPostings_benefits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobPostings_benefitsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobPostings_benefitsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings_benefits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobPostings_benefitsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_benefitsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobPostings_benefits.
     * @param {JobPostings_benefitsUpsertArgs} args - Arguments to update or create a JobPostings_benefits.
     * @example
     * // Update or create a JobPostings_benefits
     * const jobPostings_benefits = await prisma.jobPostings_benefits.upsert({
     *   create: {
     *     // ... data to create a JobPostings_benefits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPostings_benefits we want to update
     *   }
     * })
    **/
    upsert<T extends JobPostings_benefitsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JobPostings_benefitsUpsertArgs<ExtArgs>>
    ): Prisma__JobPostings_benefitsClient<$Result.GetResult<Prisma.$JobPostings_benefitsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of JobPostings_benefits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsCountArgs} args - Arguments to filter JobPostings_benefits to count.
     * @example
     * // Count the number of JobPostings_benefits
     * const count = await prisma.jobPostings_benefits.count({
     *   where: {
     *     // ... the filter for the JobPostings_benefits we want to count
     *   }
     * })
    **/
    count<T extends JobPostings_benefitsCountArgs>(
      args?: Subset<T, JobPostings_benefitsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPostings_benefitsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPostings_benefits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPostings_benefitsAggregateArgs>(args: Subset<T, JobPostings_benefitsAggregateArgs>): Prisma.PrismaPromise<GetJobPostings_benefitsAggregateType<T>>

    /**
     * Group by JobPostings_benefits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostings_benefitsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPostings_benefitsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPostings_benefitsGroupByArgs['orderBy'] }
        : { orderBy?: JobPostings_benefitsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPostings_benefitsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPostings_benefitsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPostings_benefits model
   */
  readonly fields: JobPostings_benefitsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPostings_benefits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPostings_benefitsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    JobPostings<T extends JobPostingsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingsDefaultArgs<ExtArgs>>): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the JobPostings_benefits model
   */ 
  interface JobPostings_benefitsFieldRefs {
    readonly jobID: FieldRef<"JobPostings_benefits", 'BigInt'>
    readonly benefits: FieldRef<"JobPostings_benefits", 'String'>
  }
    

  // Custom InputTypes

  /**
   * JobPostings_benefits findUnique
   */
  export type JobPostings_benefitsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_benefits to fetch.
     */
    where: JobPostings_benefitsWhereUniqueInput
  }


  /**
   * JobPostings_benefits findUniqueOrThrow
   */
  export type JobPostings_benefitsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_benefits to fetch.
     */
    where: JobPostings_benefitsWhereUniqueInput
  }


  /**
   * JobPostings_benefits findFirst
   */
  export type JobPostings_benefitsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_benefits to fetch.
     */
    where?: JobPostings_benefitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_benefits to fetch.
     */
    orderBy?: JobPostings_benefitsOrderByWithRelationInput | JobPostings_benefitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings_benefits.
     */
    cursor?: JobPostings_benefitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_benefits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_benefits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings_benefits.
     */
    distinct?: JobPostings_benefitsScalarFieldEnum | JobPostings_benefitsScalarFieldEnum[]
  }


  /**
   * JobPostings_benefits findFirstOrThrow
   */
  export type JobPostings_benefitsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_benefits to fetch.
     */
    where?: JobPostings_benefitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_benefits to fetch.
     */
    orderBy?: JobPostings_benefitsOrderByWithRelationInput | JobPostings_benefitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings_benefits.
     */
    cursor?: JobPostings_benefitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_benefits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_benefits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings_benefits.
     */
    distinct?: JobPostings_benefitsScalarFieldEnum | JobPostings_benefitsScalarFieldEnum[]
  }


  /**
   * JobPostings_benefits findMany
   */
  export type JobPostings_benefitsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings_benefits to fetch.
     */
    where?: JobPostings_benefitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings_benefits to fetch.
     */
    orderBy?: JobPostings_benefitsOrderByWithRelationInput | JobPostings_benefitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPostings_benefits.
     */
    cursor?: JobPostings_benefitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings_benefits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings_benefits.
     */
    skip?: number
    distinct?: JobPostings_benefitsScalarFieldEnum | JobPostings_benefitsScalarFieldEnum[]
  }


  /**
   * JobPostings_benefits create
   */
  export type JobPostings_benefitsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPostings_benefits.
     */
    data: XOR<JobPostings_benefitsCreateInput, JobPostings_benefitsUncheckedCreateInput>
  }


  /**
   * JobPostings_benefits createMany
   */
  export type JobPostings_benefitsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPostings_benefits.
     */
    data: JobPostings_benefitsCreateManyInput | JobPostings_benefitsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * JobPostings_benefits update
   */
  export type JobPostings_benefitsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPostings_benefits.
     */
    data: XOR<JobPostings_benefitsUpdateInput, JobPostings_benefitsUncheckedUpdateInput>
    /**
     * Choose, which JobPostings_benefits to update.
     */
    where: JobPostings_benefitsWhereUniqueInput
  }


  /**
   * JobPostings_benefits updateMany
   */
  export type JobPostings_benefitsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPostings_benefits.
     */
    data: XOR<JobPostings_benefitsUpdateManyMutationInput, JobPostings_benefitsUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings_benefits to update
     */
    where?: JobPostings_benefitsWhereInput
  }


  /**
   * JobPostings_benefits upsert
   */
  export type JobPostings_benefitsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPostings_benefits to update in case it exists.
     */
    where: JobPostings_benefitsWhereUniqueInput
    /**
     * In case the JobPostings_benefits found by the `where` argument doesn't exist, create a new JobPostings_benefits with this data.
     */
    create: XOR<JobPostings_benefitsCreateInput, JobPostings_benefitsUncheckedCreateInput>
    /**
     * In case the JobPostings_benefits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPostings_benefitsUpdateInput, JobPostings_benefitsUncheckedUpdateInput>
  }


  /**
   * JobPostings_benefits delete
   */
  export type JobPostings_benefitsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
    /**
     * Filter which JobPostings_benefits to delete.
     */
    where: JobPostings_benefitsWhereUniqueInput
  }


  /**
   * JobPostings_benefits deleteMany
   */
  export type JobPostings_benefitsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings_benefits to delete
     */
    where?: JobPostings_benefitsWhereInput
  }


  /**
   * JobPostings_benefits without action
   */
  export type JobPostings_benefitsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostings_benefits
     */
    select?: JobPostings_benefitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobPostings_benefitsInclude<ExtArgs> | null
  }



  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateAvgAggregateOutputType = {
    candidateID: number | null
  }

  export type CandidateSumAggregateOutputType = {
    candidateID: bigint | null
  }

  export type CandidateMinAggregateOutputType = {
    candidateID: bigint | null
    fullName: string | null
    email: string | null
    passwordHash: string | null
  }

  export type CandidateMaxAggregateOutputType = {
    candidateID: bigint | null
    fullName: string | null
    email: string | null
    passwordHash: string | null
  }

  export type CandidateCountAggregateOutputType = {
    candidateID: number
    fullName: number
    email: number
    passwordHash: number
    _all: number
  }


  export type CandidateAvgAggregateInputType = {
    candidateID?: true
  }

  export type CandidateSumAggregateInputType = {
    candidateID?: true
  }

  export type CandidateMinAggregateInputType = {
    candidateID?: true
    fullName?: true
    email?: true
    passwordHash?: true
  }

  export type CandidateMaxAggregateInputType = {
    candidateID?: true
    fullName?: true
    email?: true
    passwordHash?: true
  }

  export type CandidateCountAggregateInputType = {
    candidateID?: true
    fullName?: true
    email?: true
    passwordHash?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _avg?: CandidateAvgAggregateInputType
    _sum?: CandidateSumAggregateInputType
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    candidateID: bigint
    fullName: string
    email: string
    passwordHash: string
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    candidateID?: boolean
    fullName?: boolean
    email?: boolean
    passwordHash?: boolean
    mobileNumbers?: boolean | Candidate$mobileNumbersArgs<ExtArgs>
    candidateSkills?: boolean | Candidate$candidateSkillsArgs<ExtArgs>
    Applications?: boolean | Candidate$ApplicationsArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectScalar = {
    candidateID?: boolean
    fullName?: boolean
    email?: boolean
    passwordHash?: boolean
  }

  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mobileNumbers?: boolean | Candidate$mobileNumbersArgs<ExtArgs>
    candidateSkills?: boolean | Candidate$candidateSkillsArgs<ExtArgs>
    Applications?: boolean | Candidate$ApplicationsArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      mobileNumbers: Prisma.$Candidate_mobileNumberPayload<ExtArgs>[]
      candidateSkills: Prisma.$Candidate_candidateSkillsPayload<ExtArgs>[]
      Applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      candidateID: bigint
      fullName: string
      email: string
      passwordHash: string
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }


  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Candidate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `candidateID`
     * const candidateWithCandidateIDOnly = await prisma.candidate.findMany({ select: { candidateID: true } })
     * 
    **/
    findMany<T extends CandidateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
    **/
    create<T extends CandidateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Candidates.
     *     @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     *     @example
     *     // Create many Candidates
     *     const candidate = await prisma.candidate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
    **/
    delete<T extends CandidateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mobileNumbers<T extends Candidate$mobileNumbersArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$mobileNumbersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'findMany'> | Null>;

    candidateSkills<T extends Candidate$candidateSkillsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$candidateSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Applications<T extends Candidate$ApplicationsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$ApplicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Candidate model
   */ 
  interface CandidateFieldRefs {
    readonly candidateID: FieldRef<"Candidate", 'BigInt'>
    readonly fullName: FieldRef<"Candidate", 'String'>
    readonly email: FieldRef<"Candidate", 'String'>
    readonly passwordHash: FieldRef<"Candidate", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }


  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }


  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }


  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }


  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
  }


  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }


  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
  }


  /**
   * Candidate.mobileNumbers
   */
  export type Candidate$mobileNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    where?: Candidate_mobileNumberWhereInput
    orderBy?: Candidate_mobileNumberOrderByWithRelationInput | Candidate_mobileNumberOrderByWithRelationInput[]
    cursor?: Candidate_mobileNumberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Candidate_mobileNumberScalarFieldEnum | Candidate_mobileNumberScalarFieldEnum[]
  }


  /**
   * Candidate.candidateSkills
   */
  export type Candidate$candidateSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    where?: Candidate_candidateSkillsWhereInput
    orderBy?: Candidate_candidateSkillsOrderByWithRelationInput | Candidate_candidateSkillsOrderByWithRelationInput[]
    cursor?: Candidate_candidateSkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Candidate_candidateSkillsScalarFieldEnum | Candidate_candidateSkillsScalarFieldEnum[]
  }


  /**
   * Candidate.Applications
   */
  export type Candidate$ApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidateInclude<ExtArgs> | null
  }



  /**
   * Model Candidate_mobileNumber
   */

  export type AggregateCandidate_mobileNumber = {
    _count: Candidate_mobileNumberCountAggregateOutputType | null
    _avg: Candidate_mobileNumberAvgAggregateOutputType | null
    _sum: Candidate_mobileNumberSumAggregateOutputType | null
    _min: Candidate_mobileNumberMinAggregateOutputType | null
    _max: Candidate_mobileNumberMaxAggregateOutputType | null
  }

  export type Candidate_mobileNumberAvgAggregateOutputType = {
    candidateID: number | null
  }

  export type Candidate_mobileNumberSumAggregateOutputType = {
    candidateID: bigint | null
  }

  export type Candidate_mobileNumberMinAggregateOutputType = {
    candidateID: bigint | null
    mobileNumber: string | null
  }

  export type Candidate_mobileNumberMaxAggregateOutputType = {
    candidateID: bigint | null
    mobileNumber: string | null
  }

  export type Candidate_mobileNumberCountAggregateOutputType = {
    candidateID: number
    mobileNumber: number
    _all: number
  }


  export type Candidate_mobileNumberAvgAggregateInputType = {
    candidateID?: true
  }

  export type Candidate_mobileNumberSumAggregateInputType = {
    candidateID?: true
  }

  export type Candidate_mobileNumberMinAggregateInputType = {
    candidateID?: true
    mobileNumber?: true
  }

  export type Candidate_mobileNumberMaxAggregateInputType = {
    candidateID?: true
    mobileNumber?: true
  }

  export type Candidate_mobileNumberCountAggregateInputType = {
    candidateID?: true
    mobileNumber?: true
    _all?: true
  }

  export type Candidate_mobileNumberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate_mobileNumber to aggregate.
     */
    where?: Candidate_mobileNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_mobileNumbers to fetch.
     */
    orderBy?: Candidate_mobileNumberOrderByWithRelationInput | Candidate_mobileNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Candidate_mobileNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_mobileNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_mobileNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidate_mobileNumbers
    **/
    _count?: true | Candidate_mobileNumberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Candidate_mobileNumberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Candidate_mobileNumberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Candidate_mobileNumberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Candidate_mobileNumberMaxAggregateInputType
  }

  export type GetCandidate_mobileNumberAggregateType<T extends Candidate_mobileNumberAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate_mobileNumber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate_mobileNumber[P]>
      : GetScalarType<T[P], AggregateCandidate_mobileNumber[P]>
  }




  export type Candidate_mobileNumberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Candidate_mobileNumberWhereInput
    orderBy?: Candidate_mobileNumberOrderByWithAggregationInput | Candidate_mobileNumberOrderByWithAggregationInput[]
    by: Candidate_mobileNumberScalarFieldEnum[] | Candidate_mobileNumberScalarFieldEnum
    having?: Candidate_mobileNumberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Candidate_mobileNumberCountAggregateInputType | true
    _avg?: Candidate_mobileNumberAvgAggregateInputType
    _sum?: Candidate_mobileNumberSumAggregateInputType
    _min?: Candidate_mobileNumberMinAggregateInputType
    _max?: Candidate_mobileNumberMaxAggregateInputType
  }

  export type Candidate_mobileNumberGroupByOutputType = {
    candidateID: bigint
    mobileNumber: string
    _count: Candidate_mobileNumberCountAggregateOutputType | null
    _avg: Candidate_mobileNumberAvgAggregateOutputType | null
    _sum: Candidate_mobileNumberSumAggregateOutputType | null
    _min: Candidate_mobileNumberMinAggregateOutputType | null
    _max: Candidate_mobileNumberMaxAggregateOutputType | null
  }

  type GetCandidate_mobileNumberGroupByPayload<T extends Candidate_mobileNumberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Candidate_mobileNumberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Candidate_mobileNumberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Candidate_mobileNumberGroupByOutputType[P]>
            : GetScalarType<T[P], Candidate_mobileNumberGroupByOutputType[P]>
        }
      >
    >


  export type Candidate_mobileNumberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    candidateID?: boolean
    mobileNumber?: boolean
    Candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate_mobileNumber"]>

  export type Candidate_mobileNumberSelectScalar = {
    candidateID?: boolean
    mobileNumber?: boolean
  }

  export type Candidate_mobileNumberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }


  export type $Candidate_mobileNumberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate_mobileNumber"
    objects: {
      Candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      candidateID: bigint
      mobileNumber: string
    }, ExtArgs["result"]["candidate_mobileNumber"]>
    composites: {}
  }


  type Candidate_mobileNumberGetPayload<S extends boolean | null | undefined | Candidate_mobileNumberDefaultArgs> = $Result.GetResult<Prisma.$Candidate_mobileNumberPayload, S>

  type Candidate_mobileNumberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Candidate_mobileNumberFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Candidate_mobileNumberCountAggregateInputType | true
    }

  export interface Candidate_mobileNumberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate_mobileNumber'], meta: { name: 'Candidate_mobileNumber' } }
    /**
     * Find zero or one Candidate_mobileNumber that matches the filter.
     * @param {Candidate_mobileNumberFindUniqueArgs} args - Arguments to find a Candidate_mobileNumber
     * @example
     * // Get one Candidate_mobileNumber
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Candidate_mobileNumberFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_mobileNumberFindUniqueArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Candidate_mobileNumber that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Candidate_mobileNumberFindUniqueOrThrowArgs} args - Arguments to find a Candidate_mobileNumber
     * @example
     * // Get one Candidate_mobileNumber
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Candidate_mobileNumberFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_mobileNumberFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Candidate_mobileNumber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberFindFirstArgs} args - Arguments to find a Candidate_mobileNumber
     * @example
     * // Get one Candidate_mobileNumber
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Candidate_mobileNumberFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_mobileNumberFindFirstArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Candidate_mobileNumber that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberFindFirstOrThrowArgs} args - Arguments to find a Candidate_mobileNumber
     * @example
     * // Get one Candidate_mobileNumber
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Candidate_mobileNumberFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_mobileNumberFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Candidate_mobileNumbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidate_mobileNumbers
     * const candidate_mobileNumbers = await prisma.candidate_mobileNumber.findMany()
     * 
     * // Get first 10 Candidate_mobileNumbers
     * const candidate_mobileNumbers = await prisma.candidate_mobileNumber.findMany({ take: 10 })
     * 
     * // Only select the `candidateID`
     * const candidate_mobileNumberWithCandidateIDOnly = await prisma.candidate_mobileNumber.findMany({ select: { candidateID: true } })
     * 
    **/
    findMany<T extends Candidate_mobileNumberFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_mobileNumberFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Candidate_mobileNumber.
     * @param {Candidate_mobileNumberCreateArgs} args - Arguments to create a Candidate_mobileNumber.
     * @example
     * // Create one Candidate_mobileNumber
     * const Candidate_mobileNumber = await prisma.candidate_mobileNumber.create({
     *   data: {
     *     // ... data to create a Candidate_mobileNumber
     *   }
     * })
     * 
    **/
    create<T extends Candidate_mobileNumberCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_mobileNumberCreateArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Candidate_mobileNumbers.
     *     @param {Candidate_mobileNumberCreateManyArgs} args - Arguments to create many Candidate_mobileNumbers.
     *     @example
     *     // Create many Candidate_mobileNumbers
     *     const candidate_mobileNumber = await prisma.candidate_mobileNumber.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Candidate_mobileNumberCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_mobileNumberCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidate_mobileNumber.
     * @param {Candidate_mobileNumberDeleteArgs} args - Arguments to delete one Candidate_mobileNumber.
     * @example
     * // Delete one Candidate_mobileNumber
     * const Candidate_mobileNumber = await prisma.candidate_mobileNumber.delete({
     *   where: {
     *     // ... filter to delete one Candidate_mobileNumber
     *   }
     * })
     * 
    **/
    delete<T extends Candidate_mobileNumberDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_mobileNumberDeleteArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Candidate_mobileNumber.
     * @param {Candidate_mobileNumberUpdateArgs} args - Arguments to update one Candidate_mobileNumber.
     * @example
     * // Update one Candidate_mobileNumber
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Candidate_mobileNumberUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_mobileNumberUpdateArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Candidate_mobileNumbers.
     * @param {Candidate_mobileNumberDeleteManyArgs} args - Arguments to filter Candidate_mobileNumbers to delete.
     * @example
     * // Delete a few Candidate_mobileNumbers
     * const { count } = await prisma.candidate_mobileNumber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Candidate_mobileNumberDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_mobileNumberDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidate_mobileNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidate_mobileNumbers
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Candidate_mobileNumberUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_mobileNumberUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate_mobileNumber.
     * @param {Candidate_mobileNumberUpsertArgs} args - Arguments to update or create a Candidate_mobileNumber.
     * @example
     * // Update or create a Candidate_mobileNumber
     * const candidate_mobileNumber = await prisma.candidate_mobileNumber.upsert({
     *   create: {
     *     // ... data to create a Candidate_mobileNumber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate_mobileNumber we want to update
     *   }
     * })
    **/
    upsert<T extends Candidate_mobileNumberUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_mobileNumberUpsertArgs<ExtArgs>>
    ): Prisma__Candidate_mobileNumberClient<$Result.GetResult<Prisma.$Candidate_mobileNumberPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Candidate_mobileNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberCountArgs} args - Arguments to filter Candidate_mobileNumbers to count.
     * @example
     * // Count the number of Candidate_mobileNumbers
     * const count = await prisma.candidate_mobileNumber.count({
     *   where: {
     *     // ... the filter for the Candidate_mobileNumbers we want to count
     *   }
     * })
    **/
    count<T extends Candidate_mobileNumberCountArgs>(
      args?: Subset<T, Candidate_mobileNumberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Candidate_mobileNumberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate_mobileNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Candidate_mobileNumberAggregateArgs>(args: Subset<T, Candidate_mobileNumberAggregateArgs>): Prisma.PrismaPromise<GetCandidate_mobileNumberAggregateType<T>>

    /**
     * Group by Candidate_mobileNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_mobileNumberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Candidate_mobileNumberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Candidate_mobileNumberGroupByArgs['orderBy'] }
        : { orderBy?: Candidate_mobileNumberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Candidate_mobileNumberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidate_mobileNumberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate_mobileNumber model
   */
  readonly fields: Candidate_mobileNumberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate_mobileNumber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Candidate_mobileNumberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Candidate_mobileNumber model
   */ 
  interface Candidate_mobileNumberFieldRefs {
    readonly candidateID: FieldRef<"Candidate_mobileNumber", 'BigInt'>
    readonly mobileNumber: FieldRef<"Candidate_mobileNumber", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Candidate_mobileNumber findUnique
   */
  export type Candidate_mobileNumberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_mobileNumber to fetch.
     */
    where: Candidate_mobileNumberWhereUniqueInput
  }


  /**
   * Candidate_mobileNumber findUniqueOrThrow
   */
  export type Candidate_mobileNumberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_mobileNumber to fetch.
     */
    where: Candidate_mobileNumberWhereUniqueInput
  }


  /**
   * Candidate_mobileNumber findFirst
   */
  export type Candidate_mobileNumberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_mobileNumber to fetch.
     */
    where?: Candidate_mobileNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_mobileNumbers to fetch.
     */
    orderBy?: Candidate_mobileNumberOrderByWithRelationInput | Candidate_mobileNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidate_mobileNumbers.
     */
    cursor?: Candidate_mobileNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_mobileNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_mobileNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidate_mobileNumbers.
     */
    distinct?: Candidate_mobileNumberScalarFieldEnum | Candidate_mobileNumberScalarFieldEnum[]
  }


  /**
   * Candidate_mobileNumber findFirstOrThrow
   */
  export type Candidate_mobileNumberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_mobileNumber to fetch.
     */
    where?: Candidate_mobileNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_mobileNumbers to fetch.
     */
    orderBy?: Candidate_mobileNumberOrderByWithRelationInput | Candidate_mobileNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidate_mobileNumbers.
     */
    cursor?: Candidate_mobileNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_mobileNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_mobileNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidate_mobileNumbers.
     */
    distinct?: Candidate_mobileNumberScalarFieldEnum | Candidate_mobileNumberScalarFieldEnum[]
  }


  /**
   * Candidate_mobileNumber findMany
   */
  export type Candidate_mobileNumberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_mobileNumbers to fetch.
     */
    where?: Candidate_mobileNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_mobileNumbers to fetch.
     */
    orderBy?: Candidate_mobileNumberOrderByWithRelationInput | Candidate_mobileNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidate_mobileNumbers.
     */
    cursor?: Candidate_mobileNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_mobileNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_mobileNumbers.
     */
    skip?: number
    distinct?: Candidate_mobileNumberScalarFieldEnum | Candidate_mobileNumberScalarFieldEnum[]
  }


  /**
   * Candidate_mobileNumber create
   */
  export type Candidate_mobileNumberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate_mobileNumber.
     */
    data: XOR<Candidate_mobileNumberCreateInput, Candidate_mobileNumberUncheckedCreateInput>
  }


  /**
   * Candidate_mobileNumber createMany
   */
  export type Candidate_mobileNumberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidate_mobileNumbers.
     */
    data: Candidate_mobileNumberCreateManyInput | Candidate_mobileNumberCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Candidate_mobileNumber update
   */
  export type Candidate_mobileNumberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate_mobileNumber.
     */
    data: XOR<Candidate_mobileNumberUpdateInput, Candidate_mobileNumberUncheckedUpdateInput>
    /**
     * Choose, which Candidate_mobileNumber to update.
     */
    where: Candidate_mobileNumberWhereUniqueInput
  }


  /**
   * Candidate_mobileNumber updateMany
   */
  export type Candidate_mobileNumberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidate_mobileNumbers.
     */
    data: XOR<Candidate_mobileNumberUpdateManyMutationInput, Candidate_mobileNumberUncheckedUpdateManyInput>
    /**
     * Filter which Candidate_mobileNumbers to update
     */
    where?: Candidate_mobileNumberWhereInput
  }


  /**
   * Candidate_mobileNumber upsert
   */
  export type Candidate_mobileNumberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate_mobileNumber to update in case it exists.
     */
    where: Candidate_mobileNumberWhereUniqueInput
    /**
     * In case the Candidate_mobileNumber found by the `where` argument doesn't exist, create a new Candidate_mobileNumber with this data.
     */
    create: XOR<Candidate_mobileNumberCreateInput, Candidate_mobileNumberUncheckedCreateInput>
    /**
     * In case the Candidate_mobileNumber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Candidate_mobileNumberUpdateInput, Candidate_mobileNumberUncheckedUpdateInput>
  }


  /**
   * Candidate_mobileNumber delete
   */
  export type Candidate_mobileNumberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
    /**
     * Filter which Candidate_mobileNumber to delete.
     */
    where: Candidate_mobileNumberWhereUniqueInput
  }


  /**
   * Candidate_mobileNumber deleteMany
   */
  export type Candidate_mobileNumberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate_mobileNumbers to delete
     */
    where?: Candidate_mobileNumberWhereInput
  }


  /**
   * Candidate_mobileNumber without action
   */
  export type Candidate_mobileNumberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_mobileNumber
     */
    select?: Candidate_mobileNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_mobileNumberInclude<ExtArgs> | null
  }



  /**
   * Model Candidate_candidateSkills
   */

  export type AggregateCandidate_candidateSkills = {
    _count: Candidate_candidateSkillsCountAggregateOutputType | null
    _avg: Candidate_candidateSkillsAvgAggregateOutputType | null
    _sum: Candidate_candidateSkillsSumAggregateOutputType | null
    _min: Candidate_candidateSkillsMinAggregateOutputType | null
    _max: Candidate_candidateSkillsMaxAggregateOutputType | null
  }

  export type Candidate_candidateSkillsAvgAggregateOutputType = {
    candidateID: number | null
  }

  export type Candidate_candidateSkillsSumAggregateOutputType = {
    candidateID: bigint | null
  }

  export type Candidate_candidateSkillsMinAggregateOutputType = {
    candidateID: bigint | null
    candidateSkills: string | null
  }

  export type Candidate_candidateSkillsMaxAggregateOutputType = {
    candidateID: bigint | null
    candidateSkills: string | null
  }

  export type Candidate_candidateSkillsCountAggregateOutputType = {
    candidateID: number
    candidateSkills: number
    _all: number
  }


  export type Candidate_candidateSkillsAvgAggregateInputType = {
    candidateID?: true
  }

  export type Candidate_candidateSkillsSumAggregateInputType = {
    candidateID?: true
  }

  export type Candidate_candidateSkillsMinAggregateInputType = {
    candidateID?: true
    candidateSkills?: true
  }

  export type Candidate_candidateSkillsMaxAggregateInputType = {
    candidateID?: true
    candidateSkills?: true
  }

  export type Candidate_candidateSkillsCountAggregateInputType = {
    candidateID?: true
    candidateSkills?: true
    _all?: true
  }

  export type Candidate_candidateSkillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate_candidateSkills to aggregate.
     */
    where?: Candidate_candidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_candidateSkills to fetch.
     */
    orderBy?: Candidate_candidateSkillsOrderByWithRelationInput | Candidate_candidateSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Candidate_candidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_candidateSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_candidateSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidate_candidateSkills
    **/
    _count?: true | Candidate_candidateSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Candidate_candidateSkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Candidate_candidateSkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Candidate_candidateSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Candidate_candidateSkillsMaxAggregateInputType
  }

  export type GetCandidate_candidateSkillsAggregateType<T extends Candidate_candidateSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate_candidateSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate_candidateSkills[P]>
      : GetScalarType<T[P], AggregateCandidate_candidateSkills[P]>
  }




  export type Candidate_candidateSkillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Candidate_candidateSkillsWhereInput
    orderBy?: Candidate_candidateSkillsOrderByWithAggregationInput | Candidate_candidateSkillsOrderByWithAggregationInput[]
    by: Candidate_candidateSkillsScalarFieldEnum[] | Candidate_candidateSkillsScalarFieldEnum
    having?: Candidate_candidateSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Candidate_candidateSkillsCountAggregateInputType | true
    _avg?: Candidate_candidateSkillsAvgAggregateInputType
    _sum?: Candidate_candidateSkillsSumAggregateInputType
    _min?: Candidate_candidateSkillsMinAggregateInputType
    _max?: Candidate_candidateSkillsMaxAggregateInputType
  }

  export type Candidate_candidateSkillsGroupByOutputType = {
    candidateID: bigint
    candidateSkills: string
    _count: Candidate_candidateSkillsCountAggregateOutputType | null
    _avg: Candidate_candidateSkillsAvgAggregateOutputType | null
    _sum: Candidate_candidateSkillsSumAggregateOutputType | null
    _min: Candidate_candidateSkillsMinAggregateOutputType | null
    _max: Candidate_candidateSkillsMaxAggregateOutputType | null
  }

  type GetCandidate_candidateSkillsGroupByPayload<T extends Candidate_candidateSkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Candidate_candidateSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Candidate_candidateSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Candidate_candidateSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], Candidate_candidateSkillsGroupByOutputType[P]>
        }
      >
    >


  export type Candidate_candidateSkillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    candidateID?: boolean
    candidateSkills?: boolean
    Candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate_candidateSkills"]>

  export type Candidate_candidateSkillsSelectScalar = {
    candidateID?: boolean
    candidateSkills?: boolean
  }

  export type Candidate_candidateSkillsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }


  export type $Candidate_candidateSkillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate_candidateSkills"
    objects: {
      Candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      candidateID: bigint
      candidateSkills: string
    }, ExtArgs["result"]["candidate_candidateSkills"]>
    composites: {}
  }


  type Candidate_candidateSkillsGetPayload<S extends boolean | null | undefined | Candidate_candidateSkillsDefaultArgs> = $Result.GetResult<Prisma.$Candidate_candidateSkillsPayload, S>

  type Candidate_candidateSkillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Candidate_candidateSkillsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Candidate_candidateSkillsCountAggregateInputType | true
    }

  export interface Candidate_candidateSkillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate_candidateSkills'], meta: { name: 'Candidate_candidateSkills' } }
    /**
     * Find zero or one Candidate_candidateSkills that matches the filter.
     * @param {Candidate_candidateSkillsFindUniqueArgs} args - Arguments to find a Candidate_candidateSkills
     * @example
     * // Get one Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Candidate_candidateSkillsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_candidateSkillsFindUniqueArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Candidate_candidateSkills that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Candidate_candidateSkillsFindUniqueOrThrowArgs} args - Arguments to find a Candidate_candidateSkills
     * @example
     * // Get one Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Candidate_candidateSkillsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_candidateSkillsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Candidate_candidateSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsFindFirstArgs} args - Arguments to find a Candidate_candidateSkills
     * @example
     * // Get one Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Candidate_candidateSkillsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_candidateSkillsFindFirstArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Candidate_candidateSkills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsFindFirstOrThrowArgs} args - Arguments to find a Candidate_candidateSkills
     * @example
     * // Get one Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Candidate_candidateSkillsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_candidateSkillsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Candidate_candidateSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findMany()
     * 
     * // Get first 10 Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.findMany({ take: 10 })
     * 
     * // Only select the `candidateID`
     * const candidate_candidateSkillsWithCandidateIDOnly = await prisma.candidate_candidateSkills.findMany({ select: { candidateID: true } })
     * 
    **/
    findMany<T extends Candidate_candidateSkillsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_candidateSkillsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Candidate_candidateSkills.
     * @param {Candidate_candidateSkillsCreateArgs} args - Arguments to create a Candidate_candidateSkills.
     * @example
     * // Create one Candidate_candidateSkills
     * const Candidate_candidateSkills = await prisma.candidate_candidateSkills.create({
     *   data: {
     *     // ... data to create a Candidate_candidateSkills
     *   }
     * })
     * 
    **/
    create<T extends Candidate_candidateSkillsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_candidateSkillsCreateArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Candidate_candidateSkills.
     *     @param {Candidate_candidateSkillsCreateManyArgs} args - Arguments to create many Candidate_candidateSkills.
     *     @example
     *     // Create many Candidate_candidateSkills
     *     const candidate_candidateSkills = await prisma.candidate_candidateSkills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Candidate_candidateSkillsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_candidateSkillsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidate_candidateSkills.
     * @param {Candidate_candidateSkillsDeleteArgs} args - Arguments to delete one Candidate_candidateSkills.
     * @example
     * // Delete one Candidate_candidateSkills
     * const Candidate_candidateSkills = await prisma.candidate_candidateSkills.delete({
     *   where: {
     *     // ... filter to delete one Candidate_candidateSkills
     *   }
     * })
     * 
    **/
    delete<T extends Candidate_candidateSkillsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_candidateSkillsDeleteArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Candidate_candidateSkills.
     * @param {Candidate_candidateSkillsUpdateArgs} args - Arguments to update one Candidate_candidateSkills.
     * @example
     * // Update one Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Candidate_candidateSkillsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_candidateSkillsUpdateArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Candidate_candidateSkills.
     * @param {Candidate_candidateSkillsDeleteManyArgs} args - Arguments to filter Candidate_candidateSkills to delete.
     * @example
     * // Delete a few Candidate_candidateSkills
     * const { count } = await prisma.candidate_candidateSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Candidate_candidateSkillsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Candidate_candidateSkillsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidate_candidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Candidate_candidateSkillsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_candidateSkillsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate_candidateSkills.
     * @param {Candidate_candidateSkillsUpsertArgs} args - Arguments to update or create a Candidate_candidateSkills.
     * @example
     * // Update or create a Candidate_candidateSkills
     * const candidate_candidateSkills = await prisma.candidate_candidateSkills.upsert({
     *   create: {
     *     // ... data to create a Candidate_candidateSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate_candidateSkills we want to update
     *   }
     * })
    **/
    upsert<T extends Candidate_candidateSkillsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Candidate_candidateSkillsUpsertArgs<ExtArgs>>
    ): Prisma__Candidate_candidateSkillsClient<$Result.GetResult<Prisma.$Candidate_candidateSkillsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Candidate_candidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsCountArgs} args - Arguments to filter Candidate_candidateSkills to count.
     * @example
     * // Count the number of Candidate_candidateSkills
     * const count = await prisma.candidate_candidateSkills.count({
     *   where: {
     *     // ... the filter for the Candidate_candidateSkills we want to count
     *   }
     * })
    **/
    count<T extends Candidate_candidateSkillsCountArgs>(
      args?: Subset<T, Candidate_candidateSkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Candidate_candidateSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate_candidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Candidate_candidateSkillsAggregateArgs>(args: Subset<T, Candidate_candidateSkillsAggregateArgs>): Prisma.PrismaPromise<GetCandidate_candidateSkillsAggregateType<T>>

    /**
     * Group by Candidate_candidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Candidate_candidateSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Candidate_candidateSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Candidate_candidateSkillsGroupByArgs['orderBy'] }
        : { orderBy?: Candidate_candidateSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Candidate_candidateSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidate_candidateSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate_candidateSkills model
   */
  readonly fields: Candidate_candidateSkillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate_candidateSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Candidate_candidateSkillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Candidate_candidateSkills model
   */ 
  interface Candidate_candidateSkillsFieldRefs {
    readonly candidateID: FieldRef<"Candidate_candidateSkills", 'BigInt'>
    readonly candidateSkills: FieldRef<"Candidate_candidateSkills", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Candidate_candidateSkills findUnique
   */
  export type Candidate_candidateSkillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_candidateSkills to fetch.
     */
    where: Candidate_candidateSkillsWhereUniqueInput
  }


  /**
   * Candidate_candidateSkills findUniqueOrThrow
   */
  export type Candidate_candidateSkillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_candidateSkills to fetch.
     */
    where: Candidate_candidateSkillsWhereUniqueInput
  }


  /**
   * Candidate_candidateSkills findFirst
   */
  export type Candidate_candidateSkillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_candidateSkills to fetch.
     */
    where?: Candidate_candidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_candidateSkills to fetch.
     */
    orderBy?: Candidate_candidateSkillsOrderByWithRelationInput | Candidate_candidateSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidate_candidateSkills.
     */
    cursor?: Candidate_candidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_candidateSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_candidateSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidate_candidateSkills.
     */
    distinct?: Candidate_candidateSkillsScalarFieldEnum | Candidate_candidateSkillsScalarFieldEnum[]
  }


  /**
   * Candidate_candidateSkills findFirstOrThrow
   */
  export type Candidate_candidateSkillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_candidateSkills to fetch.
     */
    where?: Candidate_candidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_candidateSkills to fetch.
     */
    orderBy?: Candidate_candidateSkillsOrderByWithRelationInput | Candidate_candidateSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidate_candidateSkills.
     */
    cursor?: Candidate_candidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_candidateSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_candidateSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidate_candidateSkills.
     */
    distinct?: Candidate_candidateSkillsScalarFieldEnum | Candidate_candidateSkillsScalarFieldEnum[]
  }


  /**
   * Candidate_candidateSkills findMany
   */
  export type Candidate_candidateSkillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * Filter, which Candidate_candidateSkills to fetch.
     */
    where?: Candidate_candidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidate_candidateSkills to fetch.
     */
    orderBy?: Candidate_candidateSkillsOrderByWithRelationInput | Candidate_candidateSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidate_candidateSkills.
     */
    cursor?: Candidate_candidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidate_candidateSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidate_candidateSkills.
     */
    skip?: number
    distinct?: Candidate_candidateSkillsScalarFieldEnum | Candidate_candidateSkillsScalarFieldEnum[]
  }


  /**
   * Candidate_candidateSkills create
   */
  export type Candidate_candidateSkillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate_candidateSkills.
     */
    data: XOR<Candidate_candidateSkillsCreateInput, Candidate_candidateSkillsUncheckedCreateInput>
  }


  /**
   * Candidate_candidateSkills createMany
   */
  export type Candidate_candidateSkillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidate_candidateSkills.
     */
    data: Candidate_candidateSkillsCreateManyInput | Candidate_candidateSkillsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Candidate_candidateSkills update
   */
  export type Candidate_candidateSkillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate_candidateSkills.
     */
    data: XOR<Candidate_candidateSkillsUpdateInput, Candidate_candidateSkillsUncheckedUpdateInput>
    /**
     * Choose, which Candidate_candidateSkills to update.
     */
    where: Candidate_candidateSkillsWhereUniqueInput
  }


  /**
   * Candidate_candidateSkills updateMany
   */
  export type Candidate_candidateSkillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidate_candidateSkills.
     */
    data: XOR<Candidate_candidateSkillsUpdateManyMutationInput, Candidate_candidateSkillsUncheckedUpdateManyInput>
    /**
     * Filter which Candidate_candidateSkills to update
     */
    where?: Candidate_candidateSkillsWhereInput
  }


  /**
   * Candidate_candidateSkills upsert
   */
  export type Candidate_candidateSkillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate_candidateSkills to update in case it exists.
     */
    where: Candidate_candidateSkillsWhereUniqueInput
    /**
     * In case the Candidate_candidateSkills found by the `where` argument doesn't exist, create a new Candidate_candidateSkills with this data.
     */
    create: XOR<Candidate_candidateSkillsCreateInput, Candidate_candidateSkillsUncheckedCreateInput>
    /**
     * In case the Candidate_candidateSkills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Candidate_candidateSkillsUpdateInput, Candidate_candidateSkillsUncheckedUpdateInput>
  }


  /**
   * Candidate_candidateSkills delete
   */
  export type Candidate_candidateSkillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
    /**
     * Filter which Candidate_candidateSkills to delete.
     */
    where: Candidate_candidateSkillsWhereUniqueInput
  }


  /**
   * Candidate_candidateSkills deleteMany
   */
  export type Candidate_candidateSkillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate_candidateSkills to delete
     */
    where?: Candidate_candidateSkillsWhereInput
  }


  /**
   * Candidate_candidateSkills without action
   */
  export type Candidate_candidateSkillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate_candidateSkills
     */
    select?: Candidate_candidateSkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Candidate_candidateSkillsInclude<ExtArgs> | null
  }



  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    applicationID: number | null
    candidateID: number | null
    jobID: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    applicationID: bigint | null
    candidateID: bigint | null
    jobID: bigint | null
  }

  export type ApplicationMinAggregateOutputType = {
    applicationID: bigint | null
    candidateID: bigint | null
    jobID: bigint | null
    resume: string | null
  }

  export type ApplicationMaxAggregateOutputType = {
    applicationID: bigint | null
    candidateID: bigint | null
    jobID: bigint | null
    resume: string | null
  }

  export type ApplicationCountAggregateOutputType = {
    applicationID: number
    candidateID: number
    jobID: number
    resume: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    applicationID?: true
    candidateID?: true
    jobID?: true
  }

  export type ApplicationSumAggregateInputType = {
    applicationID?: true
    candidateID?: true
    jobID?: true
  }

  export type ApplicationMinAggregateInputType = {
    applicationID?: true
    candidateID?: true
    jobID?: true
    resume?: true
  }

  export type ApplicationMaxAggregateInputType = {
    applicationID?: true
    candidateID?: true
    jobID?: true
    resume?: true
  }

  export type ApplicationCountAggregateInputType = {
    applicationID?: true
    candidateID?: true
    jobID?: true
    resume?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    applicationID: bigint
    candidateID: bigint
    jobID: bigint
    resume: string | null
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    applicationID?: boolean
    candidateID?: boolean
    jobID?: boolean
    resume?: boolean
    Candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    JobPostings?: boolean | JobPostingsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    applicationID?: boolean
    candidateID?: boolean
    jobID?: boolean
    resume?: boolean
  }

  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    JobPostings?: boolean | JobPostingsDefaultArgs<ExtArgs>
  }


  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      Candidate: Prisma.$CandidatePayload<ExtArgs>
      JobPostings: Prisma.$JobPostingsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      applicationID: bigint
      candidateID: bigint
      jobID: bigint
      resume: string | null
    }, ExtArgs["result"]["application"]>
    composites: {}
  }


  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Application that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `applicationID`
     * const applicationWithApplicationIDOnly = await prisma.application.findMany({ select: { applicationID: true } })
     * 
    **/
    findMany<T extends ApplicationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
    **/
    create<T extends ApplicationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Applications.
     *     @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     *     @example
     *     // Create many Applications
     *     const application = await prisma.application.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
    **/
    delete<T extends ApplicationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    JobPostings<T extends JobPostingsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingsDefaultArgs<ExtArgs>>): Prisma__JobPostingsClient<$Result.GetResult<Prisma.$JobPostingsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Application model
   */ 
  interface ApplicationFieldRefs {
    readonly applicationID: FieldRef<"Application", 'BigInt'>
    readonly candidateID: FieldRef<"Application", 'BigInt'>
    readonly jobID: FieldRef<"Application", 'BigInt'>
    readonly resume: FieldRef<"Application", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }


  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }


  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompanyScalarFieldEnum: {
    companyID: 'companyID',
    name: 'name',
    description: 'description',
    companySize: 'companySize',
    state: 'state',
    country: 'country',
    address: 'address'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const Company_industriesScalarFieldEnum: {
    companyID: 'companyID',
    industry: 'industry'
  };

  export type Company_industriesScalarFieldEnum = (typeof Company_industriesScalarFieldEnum)[keyof typeof Company_industriesScalarFieldEnum]


  export const Company_specialtiesScalarFieldEnum: {
    companyID: 'companyID',
    specialty: 'specialty'
  };

  export type Company_specialtiesScalarFieldEnum = (typeof Company_specialtiesScalarFieldEnum)[keyof typeof Company_specialtiesScalarFieldEnum]


  export const JobPostingsScalarFieldEnum: {
    jobID: 'jobID',
    companyID: 'companyID',
    title: 'title',
    description: 'description',
    salary: 'salary',
    jobPostURL: 'jobPostURL',
    location: 'location',
    experienceLevel: 'experienceLevel',
    workType: 'workType'
  };

  export type JobPostingsScalarFieldEnum = (typeof JobPostingsScalarFieldEnum)[keyof typeof JobPostingsScalarFieldEnum]


  export const JobPostings_jobSkillsScalarFieldEnum: {
    jobID: 'jobID',
    jobSkills: 'jobSkills'
  };

  export type JobPostings_jobSkillsScalarFieldEnum = (typeof JobPostings_jobSkillsScalarFieldEnum)[keyof typeof JobPostings_jobSkillsScalarFieldEnum]


  export const JobPostings_benefitsScalarFieldEnum: {
    jobID: 'jobID',
    benefits: 'benefits'
  };

  export type JobPostings_benefitsScalarFieldEnum = (typeof JobPostings_benefitsScalarFieldEnum)[keyof typeof JobPostings_benefitsScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    candidateID: 'candidateID',
    fullName: 'fullName',
    email: 'email',
    passwordHash: 'passwordHash'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const Candidate_mobileNumberScalarFieldEnum: {
    candidateID: 'candidateID',
    mobileNumber: 'mobileNumber'
  };

  export type Candidate_mobileNumberScalarFieldEnum = (typeof Candidate_mobileNumberScalarFieldEnum)[keyof typeof Candidate_mobileNumberScalarFieldEnum]


  export const Candidate_candidateSkillsScalarFieldEnum: {
    candidateID: 'candidateID',
    candidateSkills: 'candidateSkills'
  };

  export type Candidate_candidateSkillsScalarFieldEnum = (typeof Candidate_candidateSkillsScalarFieldEnum)[keyof typeof Candidate_candidateSkillsScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    applicationID: 'applicationID',
    candidateID: 'candidateID',
    jobID: 'jobID',
    resume: 'resume'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    companyID?: BigIntFilter<"Company"> | bigint | number
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    companySize?: StringNullableFilter<"Company"> | string | null
    state?: StringNullableFilter<"Company"> | string | null
    country?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    industries?: Company_industriesListRelationFilter
    specialties?: Company_specialtiesListRelationFilter
    JobPostings?: JobPostingsListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    companyID?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    companySize?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    industries?: Company_industriesOrderByRelationAggregateInput
    specialties?: Company_specialtiesOrderByRelationAggregateInput
    JobPostings?: JobPostingsOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    companyID?: bigint | number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    companySize?: StringNullableFilter<"Company"> | string | null
    state?: StringNullableFilter<"Company"> | string | null
    country?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    industries?: Company_industriesListRelationFilter
    specialties?: Company_specialtiesListRelationFilter
    JobPostings?: JobPostingsListRelationFilter
  }, "companyID">

  export type CompanyOrderByWithAggregationInput = {
    companyID?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    companySize?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    companyID?: BigIntWithAggregatesFilter<"Company"> | bigint | number
    name?: StringWithAggregatesFilter<"Company"> | string
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    companySize?: StringNullableWithAggregatesFilter<"Company"> | string | null
    state?: StringNullableWithAggregatesFilter<"Company"> | string | null
    country?: StringNullableWithAggregatesFilter<"Company"> | string | null
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
  }

  export type Company_industriesWhereInput = {
    AND?: Company_industriesWhereInput | Company_industriesWhereInput[]
    OR?: Company_industriesWhereInput[]
    NOT?: Company_industriesWhereInput | Company_industriesWhereInput[]
    companyID?: BigIntFilter<"Company_industries"> | bigint | number
    industry?: StringFilter<"Company_industries"> | string
    Company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type Company_industriesOrderByWithRelationInput = {
    companyID?: SortOrder
    industry?: SortOrder
    Company?: CompanyOrderByWithRelationInput
  }

  export type Company_industriesWhereUniqueInput = Prisma.AtLeast<{
    companyID_industry?: Company_industriesCompanyIDIndustryCompoundUniqueInput
    AND?: Company_industriesWhereInput | Company_industriesWhereInput[]
    OR?: Company_industriesWhereInput[]
    NOT?: Company_industriesWhereInput | Company_industriesWhereInput[]
    companyID?: BigIntFilter<"Company_industries"> | bigint | number
    industry?: StringFilter<"Company_industries"> | string
    Company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "companyID_industry">

  export type Company_industriesOrderByWithAggregationInput = {
    companyID?: SortOrder
    industry?: SortOrder
    _count?: Company_industriesCountOrderByAggregateInput
    _avg?: Company_industriesAvgOrderByAggregateInput
    _max?: Company_industriesMaxOrderByAggregateInput
    _min?: Company_industriesMinOrderByAggregateInput
    _sum?: Company_industriesSumOrderByAggregateInput
  }

  export type Company_industriesScalarWhereWithAggregatesInput = {
    AND?: Company_industriesScalarWhereWithAggregatesInput | Company_industriesScalarWhereWithAggregatesInput[]
    OR?: Company_industriesScalarWhereWithAggregatesInput[]
    NOT?: Company_industriesScalarWhereWithAggregatesInput | Company_industriesScalarWhereWithAggregatesInput[]
    companyID?: BigIntWithAggregatesFilter<"Company_industries"> | bigint | number
    industry?: StringWithAggregatesFilter<"Company_industries"> | string
  }

  export type Company_specialtiesWhereInput = {
    AND?: Company_specialtiesWhereInput | Company_specialtiesWhereInput[]
    OR?: Company_specialtiesWhereInput[]
    NOT?: Company_specialtiesWhereInput | Company_specialtiesWhereInput[]
    companyID?: BigIntFilter<"Company_specialties"> | bigint | number
    specialty?: StringFilter<"Company_specialties"> | string
    Company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type Company_specialtiesOrderByWithRelationInput = {
    companyID?: SortOrder
    specialty?: SortOrder
    Company?: CompanyOrderByWithRelationInput
  }

  export type Company_specialtiesWhereUniqueInput = Prisma.AtLeast<{
    companyID_specialty?: Company_specialtiesCompanyIDSpecialtyCompoundUniqueInput
    AND?: Company_specialtiesWhereInput | Company_specialtiesWhereInput[]
    OR?: Company_specialtiesWhereInput[]
    NOT?: Company_specialtiesWhereInput | Company_specialtiesWhereInput[]
    companyID?: BigIntFilter<"Company_specialties"> | bigint | number
    specialty?: StringFilter<"Company_specialties"> | string
    Company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "companyID_specialty">

  export type Company_specialtiesOrderByWithAggregationInput = {
    companyID?: SortOrder
    specialty?: SortOrder
    _count?: Company_specialtiesCountOrderByAggregateInput
    _avg?: Company_specialtiesAvgOrderByAggregateInput
    _max?: Company_specialtiesMaxOrderByAggregateInput
    _min?: Company_specialtiesMinOrderByAggregateInput
    _sum?: Company_specialtiesSumOrderByAggregateInput
  }

  export type Company_specialtiesScalarWhereWithAggregatesInput = {
    AND?: Company_specialtiesScalarWhereWithAggregatesInput | Company_specialtiesScalarWhereWithAggregatesInput[]
    OR?: Company_specialtiesScalarWhereWithAggregatesInput[]
    NOT?: Company_specialtiesScalarWhereWithAggregatesInput | Company_specialtiesScalarWhereWithAggregatesInput[]
    companyID?: BigIntWithAggregatesFilter<"Company_specialties"> | bigint | number
    specialty?: StringWithAggregatesFilter<"Company_specialties"> | string
  }

  export type JobPostingsWhereInput = {
    AND?: JobPostingsWhereInput | JobPostingsWhereInput[]
    OR?: JobPostingsWhereInput[]
    NOT?: JobPostingsWhereInput | JobPostingsWhereInput[]
    jobID?: BigIntFilter<"JobPostings"> | bigint | number
    companyID?: BigIntFilter<"JobPostings"> | bigint | number
    title?: StringFilter<"JobPostings"> | string
    description?: StringNullableFilter<"JobPostings"> | string | null
    salary?: FloatNullableFilter<"JobPostings"> | number | null
    jobPostURL?: StringNullableFilter<"JobPostings"> | string | null
    location?: StringNullableFilter<"JobPostings"> | string | null
    experienceLevel?: StringNullableFilter<"JobPostings"> | string | null
    workType?: StringNullableFilter<"JobPostings"> | string | null
    Company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    jobSkills?: JobPostings_jobSkillsListRelationFilter
    benefits?: JobPostings_benefitsListRelationFilter
    Applications?: ApplicationListRelationFilter
  }

  export type JobPostingsOrderByWithRelationInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    jobPostURL?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    workType?: SortOrderInput | SortOrder
    Company?: CompanyOrderByWithRelationInput
    jobSkills?: JobPostings_jobSkillsOrderByRelationAggregateInput
    benefits?: JobPostings_benefitsOrderByRelationAggregateInput
    Applications?: ApplicationOrderByRelationAggregateInput
  }

  export type JobPostingsWhereUniqueInput = Prisma.AtLeast<{
    jobID?: bigint | number
    AND?: JobPostingsWhereInput | JobPostingsWhereInput[]
    OR?: JobPostingsWhereInput[]
    NOT?: JobPostingsWhereInput | JobPostingsWhereInput[]
    companyID?: BigIntFilter<"JobPostings"> | bigint | number
    title?: StringFilter<"JobPostings"> | string
    description?: StringNullableFilter<"JobPostings"> | string | null
    salary?: FloatNullableFilter<"JobPostings"> | number | null
    jobPostURL?: StringNullableFilter<"JobPostings"> | string | null
    location?: StringNullableFilter<"JobPostings"> | string | null
    experienceLevel?: StringNullableFilter<"JobPostings"> | string | null
    workType?: StringNullableFilter<"JobPostings"> | string | null
    Company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    jobSkills?: JobPostings_jobSkillsListRelationFilter
    benefits?: JobPostings_benefitsListRelationFilter
    Applications?: ApplicationListRelationFilter
  }, "jobID">

  export type JobPostingsOrderByWithAggregationInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    jobPostURL?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    workType?: SortOrderInput | SortOrder
    _count?: JobPostingsCountOrderByAggregateInput
    _avg?: JobPostingsAvgOrderByAggregateInput
    _max?: JobPostingsMaxOrderByAggregateInput
    _min?: JobPostingsMinOrderByAggregateInput
    _sum?: JobPostingsSumOrderByAggregateInput
  }

  export type JobPostingsScalarWhereWithAggregatesInput = {
    AND?: JobPostingsScalarWhereWithAggregatesInput | JobPostingsScalarWhereWithAggregatesInput[]
    OR?: JobPostingsScalarWhereWithAggregatesInput[]
    NOT?: JobPostingsScalarWhereWithAggregatesInput | JobPostingsScalarWhereWithAggregatesInput[]
    jobID?: BigIntWithAggregatesFilter<"JobPostings"> | bigint | number
    companyID?: BigIntWithAggregatesFilter<"JobPostings"> | bigint | number
    title?: StringWithAggregatesFilter<"JobPostings"> | string
    description?: StringNullableWithAggregatesFilter<"JobPostings"> | string | null
    salary?: FloatNullableWithAggregatesFilter<"JobPostings"> | number | null
    jobPostURL?: StringNullableWithAggregatesFilter<"JobPostings"> | string | null
    location?: StringNullableWithAggregatesFilter<"JobPostings"> | string | null
    experienceLevel?: StringNullableWithAggregatesFilter<"JobPostings"> | string | null
    workType?: StringNullableWithAggregatesFilter<"JobPostings"> | string | null
  }

  export type JobPostings_jobSkillsWhereInput = {
    AND?: JobPostings_jobSkillsWhereInput | JobPostings_jobSkillsWhereInput[]
    OR?: JobPostings_jobSkillsWhereInput[]
    NOT?: JobPostings_jobSkillsWhereInput | JobPostings_jobSkillsWhereInput[]
    jobID?: BigIntFilter<"JobPostings_jobSkills"> | bigint | number
    jobSkills?: StringFilter<"JobPostings_jobSkills"> | string
    JobPostings?: XOR<JobPostingsRelationFilter, JobPostingsWhereInput>
  }

  export type JobPostings_jobSkillsOrderByWithRelationInput = {
    jobID?: SortOrder
    jobSkills?: SortOrder
    JobPostings?: JobPostingsOrderByWithRelationInput
  }

  export type JobPostings_jobSkillsWhereUniqueInput = Prisma.AtLeast<{
    jobID_jobSkills?: JobPostings_jobSkillsJobIDJobSkillsCompoundUniqueInput
    AND?: JobPostings_jobSkillsWhereInput | JobPostings_jobSkillsWhereInput[]
    OR?: JobPostings_jobSkillsWhereInput[]
    NOT?: JobPostings_jobSkillsWhereInput | JobPostings_jobSkillsWhereInput[]
    jobID?: BigIntFilter<"JobPostings_jobSkills"> | bigint | number
    jobSkills?: StringFilter<"JobPostings_jobSkills"> | string
    JobPostings?: XOR<JobPostingsRelationFilter, JobPostingsWhereInput>
  }, "jobID_jobSkills">

  export type JobPostings_jobSkillsOrderByWithAggregationInput = {
    jobID?: SortOrder
    jobSkills?: SortOrder
    _count?: JobPostings_jobSkillsCountOrderByAggregateInput
    _avg?: JobPostings_jobSkillsAvgOrderByAggregateInput
    _max?: JobPostings_jobSkillsMaxOrderByAggregateInput
    _min?: JobPostings_jobSkillsMinOrderByAggregateInput
    _sum?: JobPostings_jobSkillsSumOrderByAggregateInput
  }

  export type JobPostings_jobSkillsScalarWhereWithAggregatesInput = {
    AND?: JobPostings_jobSkillsScalarWhereWithAggregatesInput | JobPostings_jobSkillsScalarWhereWithAggregatesInput[]
    OR?: JobPostings_jobSkillsScalarWhereWithAggregatesInput[]
    NOT?: JobPostings_jobSkillsScalarWhereWithAggregatesInput | JobPostings_jobSkillsScalarWhereWithAggregatesInput[]
    jobID?: BigIntWithAggregatesFilter<"JobPostings_jobSkills"> | bigint | number
    jobSkills?: StringWithAggregatesFilter<"JobPostings_jobSkills"> | string
  }

  export type JobPostings_benefitsWhereInput = {
    AND?: JobPostings_benefitsWhereInput | JobPostings_benefitsWhereInput[]
    OR?: JobPostings_benefitsWhereInput[]
    NOT?: JobPostings_benefitsWhereInput | JobPostings_benefitsWhereInput[]
    jobID?: BigIntFilter<"JobPostings_benefits"> | bigint | number
    benefits?: StringFilter<"JobPostings_benefits"> | string
    JobPostings?: XOR<JobPostingsRelationFilter, JobPostingsWhereInput>
  }

  export type JobPostings_benefitsOrderByWithRelationInput = {
    jobID?: SortOrder
    benefits?: SortOrder
    JobPostings?: JobPostingsOrderByWithRelationInput
  }

  export type JobPostings_benefitsWhereUniqueInput = Prisma.AtLeast<{
    jobID_benefits?: JobPostings_benefitsJobIDBenefitsCompoundUniqueInput
    AND?: JobPostings_benefitsWhereInput | JobPostings_benefitsWhereInput[]
    OR?: JobPostings_benefitsWhereInput[]
    NOT?: JobPostings_benefitsWhereInput | JobPostings_benefitsWhereInput[]
    jobID?: BigIntFilter<"JobPostings_benefits"> | bigint | number
    benefits?: StringFilter<"JobPostings_benefits"> | string
    JobPostings?: XOR<JobPostingsRelationFilter, JobPostingsWhereInput>
  }, "jobID_benefits">

  export type JobPostings_benefitsOrderByWithAggregationInput = {
    jobID?: SortOrder
    benefits?: SortOrder
    _count?: JobPostings_benefitsCountOrderByAggregateInput
    _avg?: JobPostings_benefitsAvgOrderByAggregateInput
    _max?: JobPostings_benefitsMaxOrderByAggregateInput
    _min?: JobPostings_benefitsMinOrderByAggregateInput
    _sum?: JobPostings_benefitsSumOrderByAggregateInput
  }

  export type JobPostings_benefitsScalarWhereWithAggregatesInput = {
    AND?: JobPostings_benefitsScalarWhereWithAggregatesInput | JobPostings_benefitsScalarWhereWithAggregatesInput[]
    OR?: JobPostings_benefitsScalarWhereWithAggregatesInput[]
    NOT?: JobPostings_benefitsScalarWhereWithAggregatesInput | JobPostings_benefitsScalarWhereWithAggregatesInput[]
    jobID?: BigIntWithAggregatesFilter<"JobPostings_benefits"> | bigint | number
    benefits?: StringWithAggregatesFilter<"JobPostings_benefits"> | string
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    candidateID?: BigIntFilter<"Candidate"> | bigint | number
    fullName?: StringFilter<"Candidate"> | string
    email?: StringFilter<"Candidate"> | string
    passwordHash?: StringFilter<"Candidate"> | string
    mobileNumbers?: Candidate_mobileNumberListRelationFilter
    candidateSkills?: Candidate_candidateSkillsListRelationFilter
    Applications?: ApplicationListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    candidateID?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    mobileNumbers?: Candidate_mobileNumberOrderByRelationAggregateInput
    candidateSkills?: Candidate_candidateSkillsOrderByRelationAggregateInput
    Applications?: ApplicationOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    candidateID?: bigint | number
    email?: string
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    fullName?: StringFilter<"Candidate"> | string
    passwordHash?: StringFilter<"Candidate"> | string
    mobileNumbers?: Candidate_mobileNumberListRelationFilter
    candidateSkills?: Candidate_candidateSkillsListRelationFilter
    Applications?: ApplicationListRelationFilter
  }, "candidateID" | "email">

  export type CandidateOrderByWithAggregationInput = {
    candidateID?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _avg?: CandidateAvgOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
    _sum?: CandidateSumOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    candidateID?: BigIntWithAggregatesFilter<"Candidate"> | bigint | number
    fullName?: StringWithAggregatesFilter<"Candidate"> | string
    email?: StringWithAggregatesFilter<"Candidate"> | string
    passwordHash?: StringWithAggregatesFilter<"Candidate"> | string
  }

  export type Candidate_mobileNumberWhereInput = {
    AND?: Candidate_mobileNumberWhereInput | Candidate_mobileNumberWhereInput[]
    OR?: Candidate_mobileNumberWhereInput[]
    NOT?: Candidate_mobileNumberWhereInput | Candidate_mobileNumberWhereInput[]
    candidateID?: BigIntFilter<"Candidate_mobileNumber"> | bigint | number
    mobileNumber?: StringFilter<"Candidate_mobileNumber"> | string
    Candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }

  export type Candidate_mobileNumberOrderByWithRelationInput = {
    candidateID?: SortOrder
    mobileNumber?: SortOrder
    Candidate?: CandidateOrderByWithRelationInput
  }

  export type Candidate_mobileNumberWhereUniqueInput = Prisma.AtLeast<{
    candidateID_mobileNumber?: Candidate_mobileNumberCandidateIDMobileNumberCompoundUniqueInput
    AND?: Candidate_mobileNumberWhereInput | Candidate_mobileNumberWhereInput[]
    OR?: Candidate_mobileNumberWhereInput[]
    NOT?: Candidate_mobileNumberWhereInput | Candidate_mobileNumberWhereInput[]
    candidateID?: BigIntFilter<"Candidate_mobileNumber"> | bigint | number
    mobileNumber?: StringFilter<"Candidate_mobileNumber"> | string
    Candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }, "candidateID_mobileNumber">

  export type Candidate_mobileNumberOrderByWithAggregationInput = {
    candidateID?: SortOrder
    mobileNumber?: SortOrder
    _count?: Candidate_mobileNumberCountOrderByAggregateInput
    _avg?: Candidate_mobileNumberAvgOrderByAggregateInput
    _max?: Candidate_mobileNumberMaxOrderByAggregateInput
    _min?: Candidate_mobileNumberMinOrderByAggregateInput
    _sum?: Candidate_mobileNumberSumOrderByAggregateInput
  }

  export type Candidate_mobileNumberScalarWhereWithAggregatesInput = {
    AND?: Candidate_mobileNumberScalarWhereWithAggregatesInput | Candidate_mobileNumberScalarWhereWithAggregatesInput[]
    OR?: Candidate_mobileNumberScalarWhereWithAggregatesInput[]
    NOT?: Candidate_mobileNumberScalarWhereWithAggregatesInput | Candidate_mobileNumberScalarWhereWithAggregatesInput[]
    candidateID?: BigIntWithAggregatesFilter<"Candidate_mobileNumber"> | bigint | number
    mobileNumber?: StringWithAggregatesFilter<"Candidate_mobileNumber"> | string
  }

  export type Candidate_candidateSkillsWhereInput = {
    AND?: Candidate_candidateSkillsWhereInput | Candidate_candidateSkillsWhereInput[]
    OR?: Candidate_candidateSkillsWhereInput[]
    NOT?: Candidate_candidateSkillsWhereInput | Candidate_candidateSkillsWhereInput[]
    candidateID?: BigIntFilter<"Candidate_candidateSkills"> | bigint | number
    candidateSkills?: StringFilter<"Candidate_candidateSkills"> | string
    Candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }

  export type Candidate_candidateSkillsOrderByWithRelationInput = {
    candidateID?: SortOrder
    candidateSkills?: SortOrder
    Candidate?: CandidateOrderByWithRelationInput
  }

  export type Candidate_candidateSkillsWhereUniqueInput = Prisma.AtLeast<{
    candidateID_candidateSkills?: Candidate_candidateSkillsCandidateIDCandidateSkillsCompoundUniqueInput
    AND?: Candidate_candidateSkillsWhereInput | Candidate_candidateSkillsWhereInput[]
    OR?: Candidate_candidateSkillsWhereInput[]
    NOT?: Candidate_candidateSkillsWhereInput | Candidate_candidateSkillsWhereInput[]
    candidateID?: BigIntFilter<"Candidate_candidateSkills"> | bigint | number
    candidateSkills?: StringFilter<"Candidate_candidateSkills"> | string
    Candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }, "candidateID_candidateSkills">

  export type Candidate_candidateSkillsOrderByWithAggregationInput = {
    candidateID?: SortOrder
    candidateSkills?: SortOrder
    _count?: Candidate_candidateSkillsCountOrderByAggregateInput
    _avg?: Candidate_candidateSkillsAvgOrderByAggregateInput
    _max?: Candidate_candidateSkillsMaxOrderByAggregateInput
    _min?: Candidate_candidateSkillsMinOrderByAggregateInput
    _sum?: Candidate_candidateSkillsSumOrderByAggregateInput
  }

  export type Candidate_candidateSkillsScalarWhereWithAggregatesInput = {
    AND?: Candidate_candidateSkillsScalarWhereWithAggregatesInput | Candidate_candidateSkillsScalarWhereWithAggregatesInput[]
    OR?: Candidate_candidateSkillsScalarWhereWithAggregatesInput[]
    NOT?: Candidate_candidateSkillsScalarWhereWithAggregatesInput | Candidate_candidateSkillsScalarWhereWithAggregatesInput[]
    candidateID?: BigIntWithAggregatesFilter<"Candidate_candidateSkills"> | bigint | number
    candidateSkills?: StringWithAggregatesFilter<"Candidate_candidateSkills"> | string
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    applicationID?: BigIntFilter<"Application"> | bigint | number
    candidateID?: BigIntFilter<"Application"> | bigint | number
    jobID?: BigIntFilter<"Application"> | bigint | number
    resume?: StringNullableFilter<"Application"> | string | null
    Candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    JobPostings?: XOR<JobPostingsRelationFilter, JobPostingsWhereInput>
  }

  export type ApplicationOrderByWithRelationInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
    resume?: SortOrderInput | SortOrder
    Candidate?: CandidateOrderByWithRelationInput
    JobPostings?: JobPostingsOrderByWithRelationInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    applicationID?: bigint | number
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    candidateID?: BigIntFilter<"Application"> | bigint | number
    jobID?: BigIntFilter<"Application"> | bigint | number
    resume?: StringNullableFilter<"Application"> | string | null
    Candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    JobPostings?: XOR<JobPostingsRelationFilter, JobPostingsWhereInput>
  }, "applicationID">

  export type ApplicationOrderByWithAggregationInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
    resume?: SortOrderInput | SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    applicationID?: BigIntWithAggregatesFilter<"Application"> | bigint | number
    candidateID?: BigIntWithAggregatesFilter<"Application"> | bigint | number
    jobID?: BigIntWithAggregatesFilter<"Application"> | bigint | number
    resume?: StringNullableWithAggregatesFilter<"Application"> | string | null
  }

  export type CompanyCreateInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    industries?: Company_industriesCreateNestedManyWithoutCompanyInput
    specialties?: Company_specialtiesCreateNestedManyWithoutCompanyInput
    JobPostings?: JobPostingsCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    industries?: Company_industriesUncheckedCreateNestedManyWithoutCompanyInput
    specialties?: Company_specialtiesUncheckedCreateNestedManyWithoutCompanyInput
    JobPostings?: JobPostingsUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industries?: Company_industriesUpdateManyWithoutCompanyNestedInput
    specialties?: Company_specialtiesUpdateManyWithoutCompanyNestedInput
    JobPostings?: JobPostingsUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industries?: Company_industriesUncheckedUpdateManyWithoutCompanyNestedInput
    specialties?: Company_specialtiesUncheckedUpdateManyWithoutCompanyNestedInput
    JobPostings?: JobPostingsUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
  }

  export type CompanyUpdateManyMutationInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUncheckedUpdateManyInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Company_industriesCreateInput = {
    industry: string
    Company: CompanyCreateNestedOneWithoutIndustriesInput
  }

  export type Company_industriesUncheckedCreateInput = {
    companyID: bigint | number
    industry: string
  }

  export type Company_industriesUpdateInput = {
    industry?: StringFieldUpdateOperationsInput | string
    Company?: CompanyUpdateOneRequiredWithoutIndustriesNestedInput
  }

  export type Company_industriesUncheckedUpdateInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    industry?: StringFieldUpdateOperationsInput | string
  }

  export type Company_industriesCreateManyInput = {
    companyID: bigint | number
    industry: string
  }

  export type Company_industriesUpdateManyMutationInput = {
    industry?: StringFieldUpdateOperationsInput | string
  }

  export type Company_industriesUncheckedUpdateManyInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    industry?: StringFieldUpdateOperationsInput | string
  }

  export type Company_specialtiesCreateInput = {
    specialty: string
    Company: CompanyCreateNestedOneWithoutSpecialtiesInput
  }

  export type Company_specialtiesUncheckedCreateInput = {
    companyID: bigint | number
    specialty: string
  }

  export type Company_specialtiesUpdateInput = {
    specialty?: StringFieldUpdateOperationsInput | string
    Company?: CompanyUpdateOneRequiredWithoutSpecialtiesNestedInput
  }

  export type Company_specialtiesUncheckedUpdateInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type Company_specialtiesCreateManyInput = {
    companyID: bigint | number
    specialty: string
  }

  export type Company_specialtiesUpdateManyMutationInput = {
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type Company_specialtiesUncheckedUpdateManyInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostingsCreateInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    Company: CompanyCreateNestedOneWithoutJobPostingsInput
    jobSkills?: JobPostings_jobSkillsCreateNestedManyWithoutJobPostingsInput
    benefits?: JobPostings_benefitsCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsUncheckedCreateInput = {
    jobID: bigint | number
    companyID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    jobSkills?: JobPostings_jobSkillsUncheckedCreateNestedManyWithoutJobPostingsInput
    benefits?: JobPostings_benefitsUncheckedCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsUpdateInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: CompanyUpdateOneRequiredWithoutJobPostingsNestedInput
    jobSkills?: JobPostings_jobSkillsUpdateManyWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsUncheckedUpdateInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    jobSkills?: JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsCreateManyInput = {
    jobID: bigint | number
    companyID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
  }

  export type JobPostingsUpdateManyMutationInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostingsUncheckedUpdateManyInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostings_jobSkillsCreateInput = {
    jobSkills: string
    JobPostings: JobPostingsCreateNestedOneWithoutJobSkillsInput
  }

  export type JobPostings_jobSkillsUncheckedCreateInput = {
    jobID: bigint | number
    jobSkills: string
  }

  export type JobPostings_jobSkillsUpdateInput = {
    jobSkills?: StringFieldUpdateOperationsInput | string
    JobPostings?: JobPostingsUpdateOneRequiredWithoutJobSkillsNestedInput
  }

  export type JobPostings_jobSkillsUncheckedUpdateInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    jobSkills?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_jobSkillsCreateManyInput = {
    jobID: bigint | number
    jobSkills: string
  }

  export type JobPostings_jobSkillsUpdateManyMutationInput = {
    jobSkills?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_jobSkillsUncheckedUpdateManyInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    jobSkills?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_benefitsCreateInput = {
    benefits: string
    JobPostings: JobPostingsCreateNestedOneWithoutBenefitsInput
  }

  export type JobPostings_benefitsUncheckedCreateInput = {
    jobID: bigint | number
    benefits: string
  }

  export type JobPostings_benefitsUpdateInput = {
    benefits?: StringFieldUpdateOperationsInput | string
    JobPostings?: JobPostingsUpdateOneRequiredWithoutBenefitsNestedInput
  }

  export type JobPostings_benefitsUncheckedUpdateInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    benefits?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_benefitsCreateManyInput = {
    jobID: bigint | number
    benefits: string
  }

  export type JobPostings_benefitsUpdateManyMutationInput = {
    benefits?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_benefitsUncheckedUpdateManyInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    benefits?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateCreateInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    mobileNumbers?: Candidate_mobileNumberCreateNestedManyWithoutCandidateInput
    candidateSkills?: Candidate_candidateSkillsCreateNestedManyWithoutCandidateInput
    Applications?: ApplicationCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    mobileNumbers?: Candidate_mobileNumberUncheckedCreateNestedManyWithoutCandidateInput
    candidateSkills?: Candidate_candidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    mobileNumbers?: Candidate_mobileNumberUpdateManyWithoutCandidateNestedInput
    candidateSkills?: Candidate_candidateSkillsUpdateManyWithoutCandidateNestedInput
    Applications?: ApplicationUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    mobileNumbers?: Candidate_mobileNumberUncheckedUpdateManyWithoutCandidateNestedInput
    candidateSkills?: Candidate_candidateSkillsUncheckedUpdateManyWithoutCandidateNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateManyInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
  }

  export type CandidateUpdateManyMutationInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateUncheckedUpdateManyInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_mobileNumberCreateInput = {
    mobileNumber: string
    Candidate: CandidateCreateNestedOneWithoutMobileNumbersInput
  }

  export type Candidate_mobileNumberUncheckedCreateInput = {
    candidateID: bigint | number
    mobileNumber: string
  }

  export type Candidate_mobileNumberUpdateInput = {
    mobileNumber?: StringFieldUpdateOperationsInput | string
    Candidate?: CandidateUpdateOneRequiredWithoutMobileNumbersNestedInput
  }

  export type Candidate_mobileNumberUncheckedUpdateInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    mobileNumber?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_mobileNumberCreateManyInput = {
    candidateID: bigint | number
    mobileNumber: string
  }

  export type Candidate_mobileNumberUpdateManyMutationInput = {
    mobileNumber?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_mobileNumberUncheckedUpdateManyInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    mobileNumber?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_candidateSkillsCreateInput = {
    candidateSkills: string
    Candidate: CandidateCreateNestedOneWithoutCandidateSkillsInput
  }

  export type Candidate_candidateSkillsUncheckedCreateInput = {
    candidateID: bigint | number
    candidateSkills: string
  }

  export type Candidate_candidateSkillsUpdateInput = {
    candidateSkills?: StringFieldUpdateOperationsInput | string
    Candidate?: CandidateUpdateOneRequiredWithoutCandidateSkillsNestedInput
  }

  export type Candidate_candidateSkillsUncheckedUpdateInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    candidateSkills?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_candidateSkillsCreateManyInput = {
    candidateID: bigint | number
    candidateSkills: string
  }

  export type Candidate_candidateSkillsUpdateManyMutationInput = {
    candidateSkills?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_candidateSkillsUncheckedUpdateManyInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    candidateSkills?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationCreateInput = {
    applicationID: bigint | number
    resume?: string | null
    Candidate: CandidateCreateNestedOneWithoutApplicationsInput
    JobPostings: JobPostingsCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateInput = {
    applicationID: bigint | number
    candidateID: bigint | number
    jobID: bigint | number
    resume?: string | null
  }

  export type ApplicationUpdateInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    Candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    JobPostings?: JobPostingsUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationCreateManyInput = {
    applicationID: bigint | number
    candidateID: bigint | number
    jobID: bigint | number
    resume?: string | null
  }

  export type ApplicationUpdateManyMutationInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Company_industriesListRelationFilter = {
    every?: Company_industriesWhereInput
    some?: Company_industriesWhereInput
    none?: Company_industriesWhereInput
  }

  export type Company_specialtiesListRelationFilter = {
    every?: Company_specialtiesWhereInput
    some?: Company_specialtiesWhereInput
    none?: Company_specialtiesWhereInput
  }

  export type JobPostingsListRelationFilter = {
    every?: JobPostingsWhereInput
    some?: JobPostingsWhereInput
    none?: JobPostingsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Company_industriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Company_specialtiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobPostingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    companyID?: SortOrder
    name?: SortOrder
    description?: SortOrder
    companySize?: SortOrder
    state?: SortOrder
    country?: SortOrder
    address?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    companyID?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    companyID?: SortOrder
    name?: SortOrder
    description?: SortOrder
    companySize?: SortOrder
    state?: SortOrder
    country?: SortOrder
    address?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    companyID?: SortOrder
    name?: SortOrder
    description?: SortOrder
    companySize?: SortOrder
    state?: SortOrder
    country?: SortOrder
    address?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    companyID?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type Company_industriesCompanyIDIndustryCompoundUniqueInput = {
    companyID: bigint | number
    industry: string
  }

  export type Company_industriesCountOrderByAggregateInput = {
    companyID?: SortOrder
    industry?: SortOrder
  }

  export type Company_industriesAvgOrderByAggregateInput = {
    companyID?: SortOrder
  }

  export type Company_industriesMaxOrderByAggregateInput = {
    companyID?: SortOrder
    industry?: SortOrder
  }

  export type Company_industriesMinOrderByAggregateInput = {
    companyID?: SortOrder
    industry?: SortOrder
  }

  export type Company_industriesSumOrderByAggregateInput = {
    companyID?: SortOrder
  }

  export type Company_specialtiesCompanyIDSpecialtyCompoundUniqueInput = {
    companyID: bigint | number
    specialty: string
  }

  export type Company_specialtiesCountOrderByAggregateInput = {
    companyID?: SortOrder
    specialty?: SortOrder
  }

  export type Company_specialtiesAvgOrderByAggregateInput = {
    companyID?: SortOrder
  }

  export type Company_specialtiesMaxOrderByAggregateInput = {
    companyID?: SortOrder
    specialty?: SortOrder
  }

  export type Company_specialtiesMinOrderByAggregateInput = {
    companyID?: SortOrder
    specialty?: SortOrder
  }

  export type Company_specialtiesSumOrderByAggregateInput = {
    companyID?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type JobPostings_jobSkillsListRelationFilter = {
    every?: JobPostings_jobSkillsWhereInput
    some?: JobPostings_jobSkillsWhereInput
    none?: JobPostings_jobSkillsWhereInput
  }

  export type JobPostings_benefitsListRelationFilter = {
    every?: JobPostings_benefitsWhereInput
    some?: JobPostings_benefitsWhereInput
    none?: JobPostings_benefitsWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type JobPostings_jobSkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobPostings_benefitsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobPostingsCountOrderByAggregateInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    title?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    jobPostURL?: SortOrder
    location?: SortOrder
    experienceLevel?: SortOrder
    workType?: SortOrder
  }

  export type JobPostingsAvgOrderByAggregateInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    salary?: SortOrder
  }

  export type JobPostingsMaxOrderByAggregateInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    title?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    jobPostURL?: SortOrder
    location?: SortOrder
    experienceLevel?: SortOrder
    workType?: SortOrder
  }

  export type JobPostingsMinOrderByAggregateInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    title?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    jobPostURL?: SortOrder
    location?: SortOrder
    experienceLevel?: SortOrder
    workType?: SortOrder
  }

  export type JobPostingsSumOrderByAggregateInput = {
    jobID?: SortOrder
    companyID?: SortOrder
    salary?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type JobPostingsRelationFilter = {
    is?: JobPostingsWhereInput
    isNot?: JobPostingsWhereInput
  }

  export type JobPostings_jobSkillsJobIDJobSkillsCompoundUniqueInput = {
    jobID: bigint | number
    jobSkills: string
  }

  export type JobPostings_jobSkillsCountOrderByAggregateInput = {
    jobID?: SortOrder
    jobSkills?: SortOrder
  }

  export type JobPostings_jobSkillsAvgOrderByAggregateInput = {
    jobID?: SortOrder
  }

  export type JobPostings_jobSkillsMaxOrderByAggregateInput = {
    jobID?: SortOrder
    jobSkills?: SortOrder
  }

  export type JobPostings_jobSkillsMinOrderByAggregateInput = {
    jobID?: SortOrder
    jobSkills?: SortOrder
  }

  export type JobPostings_jobSkillsSumOrderByAggregateInput = {
    jobID?: SortOrder
  }

  export type JobPostings_benefitsJobIDBenefitsCompoundUniqueInput = {
    jobID: bigint | number
    benefits: string
  }

  export type JobPostings_benefitsCountOrderByAggregateInput = {
    jobID?: SortOrder
    benefits?: SortOrder
  }

  export type JobPostings_benefitsAvgOrderByAggregateInput = {
    jobID?: SortOrder
  }

  export type JobPostings_benefitsMaxOrderByAggregateInput = {
    jobID?: SortOrder
    benefits?: SortOrder
  }

  export type JobPostings_benefitsMinOrderByAggregateInput = {
    jobID?: SortOrder
    benefits?: SortOrder
  }

  export type JobPostings_benefitsSumOrderByAggregateInput = {
    jobID?: SortOrder
  }

  export type Candidate_mobileNumberListRelationFilter = {
    every?: Candidate_mobileNumberWhereInput
    some?: Candidate_mobileNumberWhereInput
    none?: Candidate_mobileNumberWhereInput
  }

  export type Candidate_candidateSkillsListRelationFilter = {
    every?: Candidate_candidateSkillsWhereInput
    some?: Candidate_candidateSkillsWhereInput
    none?: Candidate_candidateSkillsWhereInput
  }

  export type Candidate_mobileNumberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Candidate_candidateSkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateCountOrderByAggregateInput = {
    candidateID?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
  }

  export type CandidateAvgOrderByAggregateInput = {
    candidateID?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    candidateID?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    candidateID?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
  }

  export type CandidateSumOrderByAggregateInput = {
    candidateID?: SortOrder
  }

  export type CandidateRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type Candidate_mobileNumberCandidateIDMobileNumberCompoundUniqueInput = {
    candidateID: bigint | number
    mobileNumber: string
  }

  export type Candidate_mobileNumberCountOrderByAggregateInput = {
    candidateID?: SortOrder
    mobileNumber?: SortOrder
  }

  export type Candidate_mobileNumberAvgOrderByAggregateInput = {
    candidateID?: SortOrder
  }

  export type Candidate_mobileNumberMaxOrderByAggregateInput = {
    candidateID?: SortOrder
    mobileNumber?: SortOrder
  }

  export type Candidate_mobileNumberMinOrderByAggregateInput = {
    candidateID?: SortOrder
    mobileNumber?: SortOrder
  }

  export type Candidate_mobileNumberSumOrderByAggregateInput = {
    candidateID?: SortOrder
  }

  export type Candidate_candidateSkillsCandidateIDCandidateSkillsCompoundUniqueInput = {
    candidateID: bigint | number
    candidateSkills: string
  }

  export type Candidate_candidateSkillsCountOrderByAggregateInput = {
    candidateID?: SortOrder
    candidateSkills?: SortOrder
  }

  export type Candidate_candidateSkillsAvgOrderByAggregateInput = {
    candidateID?: SortOrder
  }

  export type Candidate_candidateSkillsMaxOrderByAggregateInput = {
    candidateID?: SortOrder
    candidateSkills?: SortOrder
  }

  export type Candidate_candidateSkillsMinOrderByAggregateInput = {
    candidateID?: SortOrder
    candidateSkills?: SortOrder
  }

  export type Candidate_candidateSkillsSumOrderByAggregateInput = {
    candidateID?: SortOrder
  }

  export type ApplicationCountOrderByAggregateInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
    resume?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
    resume?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
    resume?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    applicationID?: SortOrder
    candidateID?: SortOrder
    jobID?: SortOrder
  }

  export type Company_industriesCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Company_industriesCreateWithoutCompanyInput, Company_industriesUncheckedCreateWithoutCompanyInput> | Company_industriesCreateWithoutCompanyInput[] | Company_industriesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_industriesCreateOrConnectWithoutCompanyInput | Company_industriesCreateOrConnectWithoutCompanyInput[]
    createMany?: Company_industriesCreateManyCompanyInputEnvelope
    connect?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
  }

  export type Company_specialtiesCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Company_specialtiesCreateWithoutCompanyInput, Company_specialtiesUncheckedCreateWithoutCompanyInput> | Company_specialtiesCreateWithoutCompanyInput[] | Company_specialtiesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_specialtiesCreateOrConnectWithoutCompanyInput | Company_specialtiesCreateOrConnectWithoutCompanyInput[]
    createMany?: Company_specialtiesCreateManyCompanyInputEnvelope
    connect?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
  }

  export type JobPostingsCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobPostingsCreateWithoutCompanyInput, JobPostingsUncheckedCreateWithoutCompanyInput> | JobPostingsCreateWithoutCompanyInput[] | JobPostingsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingsCreateOrConnectWithoutCompanyInput | JobPostingsCreateOrConnectWithoutCompanyInput[]
    createMany?: JobPostingsCreateManyCompanyInputEnvelope
    connect?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
  }

  export type Company_industriesUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Company_industriesCreateWithoutCompanyInput, Company_industriesUncheckedCreateWithoutCompanyInput> | Company_industriesCreateWithoutCompanyInput[] | Company_industriesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_industriesCreateOrConnectWithoutCompanyInput | Company_industriesCreateOrConnectWithoutCompanyInput[]
    createMany?: Company_industriesCreateManyCompanyInputEnvelope
    connect?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
  }

  export type Company_specialtiesUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Company_specialtiesCreateWithoutCompanyInput, Company_specialtiesUncheckedCreateWithoutCompanyInput> | Company_specialtiesCreateWithoutCompanyInput[] | Company_specialtiesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_specialtiesCreateOrConnectWithoutCompanyInput | Company_specialtiesCreateOrConnectWithoutCompanyInput[]
    createMany?: Company_specialtiesCreateManyCompanyInputEnvelope
    connect?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
  }

  export type JobPostingsUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobPostingsCreateWithoutCompanyInput, JobPostingsUncheckedCreateWithoutCompanyInput> | JobPostingsCreateWithoutCompanyInput[] | JobPostingsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingsCreateOrConnectWithoutCompanyInput | JobPostingsCreateOrConnectWithoutCompanyInput[]
    createMany?: JobPostingsCreateManyCompanyInputEnvelope
    connect?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type Company_industriesUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Company_industriesCreateWithoutCompanyInput, Company_industriesUncheckedCreateWithoutCompanyInput> | Company_industriesCreateWithoutCompanyInput[] | Company_industriesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_industriesCreateOrConnectWithoutCompanyInput | Company_industriesCreateOrConnectWithoutCompanyInput[]
    upsert?: Company_industriesUpsertWithWhereUniqueWithoutCompanyInput | Company_industriesUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: Company_industriesCreateManyCompanyInputEnvelope
    set?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    disconnect?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    delete?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    connect?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    update?: Company_industriesUpdateWithWhereUniqueWithoutCompanyInput | Company_industriesUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: Company_industriesUpdateManyWithWhereWithoutCompanyInput | Company_industriesUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: Company_industriesScalarWhereInput | Company_industriesScalarWhereInput[]
  }

  export type Company_specialtiesUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Company_specialtiesCreateWithoutCompanyInput, Company_specialtiesUncheckedCreateWithoutCompanyInput> | Company_specialtiesCreateWithoutCompanyInput[] | Company_specialtiesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_specialtiesCreateOrConnectWithoutCompanyInput | Company_specialtiesCreateOrConnectWithoutCompanyInput[]
    upsert?: Company_specialtiesUpsertWithWhereUniqueWithoutCompanyInput | Company_specialtiesUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: Company_specialtiesCreateManyCompanyInputEnvelope
    set?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    disconnect?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    delete?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    connect?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    update?: Company_specialtiesUpdateWithWhereUniqueWithoutCompanyInput | Company_specialtiesUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: Company_specialtiesUpdateManyWithWhereWithoutCompanyInput | Company_specialtiesUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: Company_specialtiesScalarWhereInput | Company_specialtiesScalarWhereInput[]
  }

  export type JobPostingsUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobPostingsCreateWithoutCompanyInput, JobPostingsUncheckedCreateWithoutCompanyInput> | JobPostingsCreateWithoutCompanyInput[] | JobPostingsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingsCreateOrConnectWithoutCompanyInput | JobPostingsCreateOrConnectWithoutCompanyInput[]
    upsert?: JobPostingsUpsertWithWhereUniqueWithoutCompanyInput | JobPostingsUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobPostingsCreateManyCompanyInputEnvelope
    set?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    disconnect?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    delete?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    connect?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    update?: JobPostingsUpdateWithWhereUniqueWithoutCompanyInput | JobPostingsUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobPostingsUpdateManyWithWhereWithoutCompanyInput | JobPostingsUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobPostingsScalarWhereInput | JobPostingsScalarWhereInput[]
  }

  export type Company_industriesUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Company_industriesCreateWithoutCompanyInput, Company_industriesUncheckedCreateWithoutCompanyInput> | Company_industriesCreateWithoutCompanyInput[] | Company_industriesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_industriesCreateOrConnectWithoutCompanyInput | Company_industriesCreateOrConnectWithoutCompanyInput[]
    upsert?: Company_industriesUpsertWithWhereUniqueWithoutCompanyInput | Company_industriesUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: Company_industriesCreateManyCompanyInputEnvelope
    set?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    disconnect?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    delete?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    connect?: Company_industriesWhereUniqueInput | Company_industriesWhereUniqueInput[]
    update?: Company_industriesUpdateWithWhereUniqueWithoutCompanyInput | Company_industriesUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: Company_industriesUpdateManyWithWhereWithoutCompanyInput | Company_industriesUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: Company_industriesScalarWhereInput | Company_industriesScalarWhereInput[]
  }

  export type Company_specialtiesUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Company_specialtiesCreateWithoutCompanyInput, Company_specialtiesUncheckedCreateWithoutCompanyInput> | Company_specialtiesCreateWithoutCompanyInput[] | Company_specialtiesUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: Company_specialtiesCreateOrConnectWithoutCompanyInput | Company_specialtiesCreateOrConnectWithoutCompanyInput[]
    upsert?: Company_specialtiesUpsertWithWhereUniqueWithoutCompanyInput | Company_specialtiesUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: Company_specialtiesCreateManyCompanyInputEnvelope
    set?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    disconnect?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    delete?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    connect?: Company_specialtiesWhereUniqueInput | Company_specialtiesWhereUniqueInput[]
    update?: Company_specialtiesUpdateWithWhereUniqueWithoutCompanyInput | Company_specialtiesUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: Company_specialtiesUpdateManyWithWhereWithoutCompanyInput | Company_specialtiesUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: Company_specialtiesScalarWhereInput | Company_specialtiesScalarWhereInput[]
  }

  export type JobPostingsUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobPostingsCreateWithoutCompanyInput, JobPostingsUncheckedCreateWithoutCompanyInput> | JobPostingsCreateWithoutCompanyInput[] | JobPostingsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingsCreateOrConnectWithoutCompanyInput | JobPostingsCreateOrConnectWithoutCompanyInput[]
    upsert?: JobPostingsUpsertWithWhereUniqueWithoutCompanyInput | JobPostingsUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobPostingsCreateManyCompanyInputEnvelope
    set?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    disconnect?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    delete?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    connect?: JobPostingsWhereUniqueInput | JobPostingsWhereUniqueInput[]
    update?: JobPostingsUpdateWithWhereUniqueWithoutCompanyInput | JobPostingsUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobPostingsUpdateManyWithWhereWithoutCompanyInput | JobPostingsUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobPostingsScalarWhereInput | JobPostingsScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutIndustriesInput = {
    create?: XOR<CompanyCreateWithoutIndustriesInput, CompanyUncheckedCreateWithoutIndustriesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutIndustriesInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutIndustriesNestedInput = {
    create?: XOR<CompanyCreateWithoutIndustriesInput, CompanyUncheckedCreateWithoutIndustriesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutIndustriesInput
    upsert?: CompanyUpsertWithoutIndustriesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutIndustriesInput, CompanyUpdateWithoutIndustriesInput>, CompanyUncheckedUpdateWithoutIndustriesInput>
  }

  export type CompanyCreateNestedOneWithoutSpecialtiesInput = {
    create?: XOR<CompanyCreateWithoutSpecialtiesInput, CompanyUncheckedCreateWithoutSpecialtiesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSpecialtiesInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutSpecialtiesNestedInput = {
    create?: XOR<CompanyCreateWithoutSpecialtiesInput, CompanyUncheckedCreateWithoutSpecialtiesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSpecialtiesInput
    upsert?: CompanyUpsertWithoutSpecialtiesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSpecialtiesInput, CompanyUpdateWithoutSpecialtiesInput>, CompanyUncheckedUpdateWithoutSpecialtiesInput>
  }

  export type CompanyCreateNestedOneWithoutJobPostingsInput = {
    create?: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobPostingsInput
    connect?: CompanyWhereUniqueInput
  }

  export type JobPostings_jobSkillsCreateNestedManyWithoutJobPostingsInput = {
    create?: XOR<JobPostings_jobSkillsCreateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput> | JobPostings_jobSkillsCreateWithoutJobPostingsInput[] | JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput | JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput[]
    createMany?: JobPostings_jobSkillsCreateManyJobPostingsInputEnvelope
    connect?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
  }

  export type JobPostings_benefitsCreateNestedManyWithoutJobPostingsInput = {
    create?: XOR<JobPostings_benefitsCreateWithoutJobPostingsInput, JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput> | JobPostings_benefitsCreateWithoutJobPostingsInput[] | JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput | JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput[]
    createMany?: JobPostings_benefitsCreateManyJobPostingsInputEnvelope
    connect?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutJobPostingsInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingsInput, ApplicationUncheckedCreateWithoutJobPostingsInput> | ApplicationCreateWithoutJobPostingsInput[] | ApplicationUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingsInput | ApplicationCreateOrConnectWithoutJobPostingsInput[]
    createMany?: ApplicationCreateManyJobPostingsInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type JobPostings_jobSkillsUncheckedCreateNestedManyWithoutJobPostingsInput = {
    create?: XOR<JobPostings_jobSkillsCreateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput> | JobPostings_jobSkillsCreateWithoutJobPostingsInput[] | JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput | JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput[]
    createMany?: JobPostings_jobSkillsCreateManyJobPostingsInputEnvelope
    connect?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
  }

  export type JobPostings_benefitsUncheckedCreateNestedManyWithoutJobPostingsInput = {
    create?: XOR<JobPostings_benefitsCreateWithoutJobPostingsInput, JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput> | JobPostings_benefitsCreateWithoutJobPostingsInput[] | JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput | JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput[]
    createMany?: JobPostings_benefitsCreateManyJobPostingsInputEnvelope
    connect?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobPostingsInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingsInput, ApplicationUncheckedCreateWithoutJobPostingsInput> | ApplicationCreateWithoutJobPostingsInput[] | ApplicationUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingsInput | ApplicationCreateOrConnectWithoutJobPostingsInput[]
    createMany?: ApplicationCreateManyJobPostingsInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutJobPostingsNestedInput = {
    create?: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobPostingsInput
    upsert?: CompanyUpsertWithoutJobPostingsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobPostingsInput, CompanyUpdateWithoutJobPostingsInput>, CompanyUncheckedUpdateWithoutJobPostingsInput>
  }

  export type JobPostings_jobSkillsUpdateManyWithoutJobPostingsNestedInput = {
    create?: XOR<JobPostings_jobSkillsCreateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput> | JobPostings_jobSkillsCreateWithoutJobPostingsInput[] | JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput | JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput[]
    upsert?: JobPostings_jobSkillsUpsertWithWhereUniqueWithoutJobPostingsInput | JobPostings_jobSkillsUpsertWithWhereUniqueWithoutJobPostingsInput[]
    createMany?: JobPostings_jobSkillsCreateManyJobPostingsInputEnvelope
    set?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    disconnect?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    delete?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    connect?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    update?: JobPostings_jobSkillsUpdateWithWhereUniqueWithoutJobPostingsInput | JobPostings_jobSkillsUpdateWithWhereUniqueWithoutJobPostingsInput[]
    updateMany?: JobPostings_jobSkillsUpdateManyWithWhereWithoutJobPostingsInput | JobPostings_jobSkillsUpdateManyWithWhereWithoutJobPostingsInput[]
    deleteMany?: JobPostings_jobSkillsScalarWhereInput | JobPostings_jobSkillsScalarWhereInput[]
  }

  export type JobPostings_benefitsUpdateManyWithoutJobPostingsNestedInput = {
    create?: XOR<JobPostings_benefitsCreateWithoutJobPostingsInput, JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput> | JobPostings_benefitsCreateWithoutJobPostingsInput[] | JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput | JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput[]
    upsert?: JobPostings_benefitsUpsertWithWhereUniqueWithoutJobPostingsInput | JobPostings_benefitsUpsertWithWhereUniqueWithoutJobPostingsInput[]
    createMany?: JobPostings_benefitsCreateManyJobPostingsInputEnvelope
    set?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    disconnect?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    delete?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    connect?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    update?: JobPostings_benefitsUpdateWithWhereUniqueWithoutJobPostingsInput | JobPostings_benefitsUpdateWithWhereUniqueWithoutJobPostingsInput[]
    updateMany?: JobPostings_benefitsUpdateManyWithWhereWithoutJobPostingsInput | JobPostings_benefitsUpdateManyWithWhereWithoutJobPostingsInput[]
    deleteMany?: JobPostings_benefitsScalarWhereInput | JobPostings_benefitsScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutJobPostingsNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingsInput, ApplicationUncheckedCreateWithoutJobPostingsInput> | ApplicationCreateWithoutJobPostingsInput[] | ApplicationUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingsInput | ApplicationCreateOrConnectWithoutJobPostingsInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobPostingsInput | ApplicationUpsertWithWhereUniqueWithoutJobPostingsInput[]
    createMany?: ApplicationCreateManyJobPostingsInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobPostingsInput | ApplicationUpdateWithWhereUniqueWithoutJobPostingsInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobPostingsInput | ApplicationUpdateManyWithWhereWithoutJobPostingsInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsNestedInput = {
    create?: XOR<JobPostings_jobSkillsCreateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput> | JobPostings_jobSkillsCreateWithoutJobPostingsInput[] | JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput | JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput[]
    upsert?: JobPostings_jobSkillsUpsertWithWhereUniqueWithoutJobPostingsInput | JobPostings_jobSkillsUpsertWithWhereUniqueWithoutJobPostingsInput[]
    createMany?: JobPostings_jobSkillsCreateManyJobPostingsInputEnvelope
    set?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    disconnect?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    delete?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    connect?: JobPostings_jobSkillsWhereUniqueInput | JobPostings_jobSkillsWhereUniqueInput[]
    update?: JobPostings_jobSkillsUpdateWithWhereUniqueWithoutJobPostingsInput | JobPostings_jobSkillsUpdateWithWhereUniqueWithoutJobPostingsInput[]
    updateMany?: JobPostings_jobSkillsUpdateManyWithWhereWithoutJobPostingsInput | JobPostings_jobSkillsUpdateManyWithWhereWithoutJobPostingsInput[]
    deleteMany?: JobPostings_jobSkillsScalarWhereInput | JobPostings_jobSkillsScalarWhereInput[]
  }

  export type JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsNestedInput = {
    create?: XOR<JobPostings_benefitsCreateWithoutJobPostingsInput, JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput> | JobPostings_benefitsCreateWithoutJobPostingsInput[] | JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput | JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput[]
    upsert?: JobPostings_benefitsUpsertWithWhereUniqueWithoutJobPostingsInput | JobPostings_benefitsUpsertWithWhereUniqueWithoutJobPostingsInput[]
    createMany?: JobPostings_benefitsCreateManyJobPostingsInputEnvelope
    set?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    disconnect?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    delete?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    connect?: JobPostings_benefitsWhereUniqueInput | JobPostings_benefitsWhereUniqueInput[]
    update?: JobPostings_benefitsUpdateWithWhereUniqueWithoutJobPostingsInput | JobPostings_benefitsUpdateWithWhereUniqueWithoutJobPostingsInput[]
    updateMany?: JobPostings_benefitsUpdateManyWithWhereWithoutJobPostingsInput | JobPostings_benefitsUpdateManyWithWhereWithoutJobPostingsInput[]
    deleteMany?: JobPostings_benefitsScalarWhereInput | JobPostings_benefitsScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutJobPostingsNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingsInput, ApplicationUncheckedCreateWithoutJobPostingsInput> | ApplicationCreateWithoutJobPostingsInput[] | ApplicationUncheckedCreateWithoutJobPostingsInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingsInput | ApplicationCreateOrConnectWithoutJobPostingsInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobPostingsInput | ApplicationUpsertWithWhereUniqueWithoutJobPostingsInput[]
    createMany?: ApplicationCreateManyJobPostingsInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobPostingsInput | ApplicationUpdateWithWhereUniqueWithoutJobPostingsInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobPostingsInput | ApplicationUpdateManyWithWhereWithoutJobPostingsInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type JobPostingsCreateNestedOneWithoutJobSkillsInput = {
    create?: XOR<JobPostingsCreateWithoutJobSkillsInput, JobPostingsUncheckedCreateWithoutJobSkillsInput>
    connectOrCreate?: JobPostingsCreateOrConnectWithoutJobSkillsInput
    connect?: JobPostingsWhereUniqueInput
  }

  export type JobPostingsUpdateOneRequiredWithoutJobSkillsNestedInput = {
    create?: XOR<JobPostingsCreateWithoutJobSkillsInput, JobPostingsUncheckedCreateWithoutJobSkillsInput>
    connectOrCreate?: JobPostingsCreateOrConnectWithoutJobSkillsInput
    upsert?: JobPostingsUpsertWithoutJobSkillsInput
    connect?: JobPostingsWhereUniqueInput
    update?: XOR<XOR<JobPostingsUpdateToOneWithWhereWithoutJobSkillsInput, JobPostingsUpdateWithoutJobSkillsInput>, JobPostingsUncheckedUpdateWithoutJobSkillsInput>
  }

  export type JobPostingsCreateNestedOneWithoutBenefitsInput = {
    create?: XOR<JobPostingsCreateWithoutBenefitsInput, JobPostingsUncheckedCreateWithoutBenefitsInput>
    connectOrCreate?: JobPostingsCreateOrConnectWithoutBenefitsInput
    connect?: JobPostingsWhereUniqueInput
  }

  export type JobPostingsUpdateOneRequiredWithoutBenefitsNestedInput = {
    create?: XOR<JobPostingsCreateWithoutBenefitsInput, JobPostingsUncheckedCreateWithoutBenefitsInput>
    connectOrCreate?: JobPostingsCreateOrConnectWithoutBenefitsInput
    upsert?: JobPostingsUpsertWithoutBenefitsInput
    connect?: JobPostingsWhereUniqueInput
    update?: XOR<XOR<JobPostingsUpdateToOneWithWhereWithoutBenefitsInput, JobPostingsUpdateWithoutBenefitsInput>, JobPostingsUncheckedUpdateWithoutBenefitsInput>
  }

  export type Candidate_mobileNumberCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Candidate_mobileNumberCreateWithoutCandidateInput, Candidate_mobileNumberUncheckedCreateWithoutCandidateInput> | Candidate_mobileNumberCreateWithoutCandidateInput[] | Candidate_mobileNumberUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_mobileNumberCreateOrConnectWithoutCandidateInput | Candidate_mobileNumberCreateOrConnectWithoutCandidateInput[]
    createMany?: Candidate_mobileNumberCreateManyCandidateInputEnvelope
    connect?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
  }

  export type Candidate_candidateSkillsCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Candidate_candidateSkillsCreateWithoutCandidateInput, Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput> | Candidate_candidateSkillsCreateWithoutCandidateInput[] | Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput | Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput[]
    createMany?: Candidate_candidateSkillsCreateManyCandidateInputEnvelope
    connect?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type Candidate_mobileNumberUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Candidate_mobileNumberCreateWithoutCandidateInput, Candidate_mobileNumberUncheckedCreateWithoutCandidateInput> | Candidate_mobileNumberCreateWithoutCandidateInput[] | Candidate_mobileNumberUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_mobileNumberCreateOrConnectWithoutCandidateInput | Candidate_mobileNumberCreateOrConnectWithoutCandidateInput[]
    createMany?: Candidate_mobileNumberCreateManyCandidateInputEnvelope
    connect?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
  }

  export type Candidate_candidateSkillsUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Candidate_candidateSkillsCreateWithoutCandidateInput, Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput> | Candidate_candidateSkillsCreateWithoutCandidateInput[] | Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput | Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput[]
    createMany?: Candidate_candidateSkillsCreateManyCandidateInputEnvelope
    connect?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type Candidate_mobileNumberUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<Candidate_mobileNumberCreateWithoutCandidateInput, Candidate_mobileNumberUncheckedCreateWithoutCandidateInput> | Candidate_mobileNumberCreateWithoutCandidateInput[] | Candidate_mobileNumberUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_mobileNumberCreateOrConnectWithoutCandidateInput | Candidate_mobileNumberCreateOrConnectWithoutCandidateInput[]
    upsert?: Candidate_mobileNumberUpsertWithWhereUniqueWithoutCandidateInput | Candidate_mobileNumberUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: Candidate_mobileNumberCreateManyCandidateInputEnvelope
    set?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    disconnect?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    delete?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    connect?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    update?: Candidate_mobileNumberUpdateWithWhereUniqueWithoutCandidateInput | Candidate_mobileNumberUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: Candidate_mobileNumberUpdateManyWithWhereWithoutCandidateInput | Candidate_mobileNumberUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: Candidate_mobileNumberScalarWhereInput | Candidate_mobileNumberScalarWhereInput[]
  }

  export type Candidate_candidateSkillsUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<Candidate_candidateSkillsCreateWithoutCandidateInput, Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput> | Candidate_candidateSkillsCreateWithoutCandidateInput[] | Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput | Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput[]
    upsert?: Candidate_candidateSkillsUpsertWithWhereUniqueWithoutCandidateInput | Candidate_candidateSkillsUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: Candidate_candidateSkillsCreateManyCandidateInputEnvelope
    set?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    disconnect?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    delete?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    connect?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    update?: Candidate_candidateSkillsUpdateWithWhereUniqueWithoutCandidateInput | Candidate_candidateSkillsUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: Candidate_candidateSkillsUpdateManyWithWhereWithoutCandidateInput | Candidate_candidateSkillsUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: Candidate_candidateSkillsScalarWhereInput | Candidate_candidateSkillsScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCandidateInput | ApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCandidateInput | ApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCandidateInput | ApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type Candidate_mobileNumberUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<Candidate_mobileNumberCreateWithoutCandidateInput, Candidate_mobileNumberUncheckedCreateWithoutCandidateInput> | Candidate_mobileNumberCreateWithoutCandidateInput[] | Candidate_mobileNumberUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_mobileNumberCreateOrConnectWithoutCandidateInput | Candidate_mobileNumberCreateOrConnectWithoutCandidateInput[]
    upsert?: Candidate_mobileNumberUpsertWithWhereUniqueWithoutCandidateInput | Candidate_mobileNumberUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: Candidate_mobileNumberCreateManyCandidateInputEnvelope
    set?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    disconnect?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    delete?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    connect?: Candidate_mobileNumberWhereUniqueInput | Candidate_mobileNumberWhereUniqueInput[]
    update?: Candidate_mobileNumberUpdateWithWhereUniqueWithoutCandidateInput | Candidate_mobileNumberUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: Candidate_mobileNumberUpdateManyWithWhereWithoutCandidateInput | Candidate_mobileNumberUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: Candidate_mobileNumberScalarWhereInput | Candidate_mobileNumberScalarWhereInput[]
  }

  export type Candidate_candidateSkillsUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<Candidate_candidateSkillsCreateWithoutCandidateInput, Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput> | Candidate_candidateSkillsCreateWithoutCandidateInput[] | Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput | Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput[]
    upsert?: Candidate_candidateSkillsUpsertWithWhereUniqueWithoutCandidateInput | Candidate_candidateSkillsUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: Candidate_candidateSkillsCreateManyCandidateInputEnvelope
    set?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    disconnect?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    delete?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    connect?: Candidate_candidateSkillsWhereUniqueInput | Candidate_candidateSkillsWhereUniqueInput[]
    update?: Candidate_candidateSkillsUpdateWithWhereUniqueWithoutCandidateInput | Candidate_candidateSkillsUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: Candidate_candidateSkillsUpdateManyWithWhereWithoutCandidateInput | Candidate_candidateSkillsUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: Candidate_candidateSkillsScalarWhereInput | Candidate_candidateSkillsScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCandidateInput | ApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCandidateInput | ApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCandidateInput | ApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CandidateCreateNestedOneWithoutMobileNumbersInput = {
    create?: XOR<CandidateCreateWithoutMobileNumbersInput, CandidateUncheckedCreateWithoutMobileNumbersInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutMobileNumbersInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutMobileNumbersNestedInput = {
    create?: XOR<CandidateCreateWithoutMobileNumbersInput, CandidateUncheckedCreateWithoutMobileNumbersInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutMobileNumbersInput
    upsert?: CandidateUpsertWithoutMobileNumbersInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutMobileNumbersInput, CandidateUpdateWithoutMobileNumbersInput>, CandidateUncheckedUpdateWithoutMobileNumbersInput>
  }

  export type CandidateCreateNestedOneWithoutCandidateSkillsInput = {
    create?: XOR<CandidateCreateWithoutCandidateSkillsInput, CandidateUncheckedCreateWithoutCandidateSkillsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCandidateSkillsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutCandidateSkillsNestedInput = {
    create?: XOR<CandidateCreateWithoutCandidateSkillsInput, CandidateUncheckedCreateWithoutCandidateSkillsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCandidateSkillsInput
    upsert?: CandidateUpsertWithoutCandidateSkillsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutCandidateSkillsInput, CandidateUpdateWithoutCandidateSkillsInput>, CandidateUncheckedUpdateWithoutCandidateSkillsInput>
  }

  export type CandidateCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
  }

  export type JobPostingsCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobPostingsCreateWithoutApplicationsInput, JobPostingsUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobPostingsCreateOrConnectWithoutApplicationsInput
    connect?: JobPostingsWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    upsert?: CandidateUpsertWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutApplicationsInput, CandidateUpdateWithoutApplicationsInput>, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobPostingsUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobPostingsCreateWithoutApplicationsInput, JobPostingsUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobPostingsCreateOrConnectWithoutApplicationsInput
    upsert?: JobPostingsUpsertWithoutApplicationsInput
    connect?: JobPostingsWhereUniqueInput
    update?: XOR<XOR<JobPostingsUpdateToOneWithWhereWithoutApplicationsInput, JobPostingsUpdateWithoutApplicationsInput>, JobPostingsUncheckedUpdateWithoutApplicationsInput>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type Company_industriesCreateWithoutCompanyInput = {
    industry: string
  }

  export type Company_industriesUncheckedCreateWithoutCompanyInput = {
    industry: string
  }

  export type Company_industriesCreateOrConnectWithoutCompanyInput = {
    where: Company_industriesWhereUniqueInput
    create: XOR<Company_industriesCreateWithoutCompanyInput, Company_industriesUncheckedCreateWithoutCompanyInput>
  }

  export type Company_industriesCreateManyCompanyInputEnvelope = {
    data: Company_industriesCreateManyCompanyInput | Company_industriesCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type Company_specialtiesCreateWithoutCompanyInput = {
    specialty: string
  }

  export type Company_specialtiesUncheckedCreateWithoutCompanyInput = {
    specialty: string
  }

  export type Company_specialtiesCreateOrConnectWithoutCompanyInput = {
    where: Company_specialtiesWhereUniqueInput
    create: XOR<Company_specialtiesCreateWithoutCompanyInput, Company_specialtiesUncheckedCreateWithoutCompanyInput>
  }

  export type Company_specialtiesCreateManyCompanyInputEnvelope = {
    data: Company_specialtiesCreateManyCompanyInput | Company_specialtiesCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type JobPostingsCreateWithoutCompanyInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    jobSkills?: JobPostings_jobSkillsCreateNestedManyWithoutJobPostingsInput
    benefits?: JobPostings_benefitsCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsUncheckedCreateWithoutCompanyInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    jobSkills?: JobPostings_jobSkillsUncheckedCreateNestedManyWithoutJobPostingsInput
    benefits?: JobPostings_benefitsUncheckedCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsCreateOrConnectWithoutCompanyInput = {
    where: JobPostingsWhereUniqueInput
    create: XOR<JobPostingsCreateWithoutCompanyInput, JobPostingsUncheckedCreateWithoutCompanyInput>
  }

  export type JobPostingsCreateManyCompanyInputEnvelope = {
    data: JobPostingsCreateManyCompanyInput | JobPostingsCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type Company_industriesUpsertWithWhereUniqueWithoutCompanyInput = {
    where: Company_industriesWhereUniqueInput
    update: XOR<Company_industriesUpdateWithoutCompanyInput, Company_industriesUncheckedUpdateWithoutCompanyInput>
    create: XOR<Company_industriesCreateWithoutCompanyInput, Company_industriesUncheckedCreateWithoutCompanyInput>
  }

  export type Company_industriesUpdateWithWhereUniqueWithoutCompanyInput = {
    where: Company_industriesWhereUniqueInput
    data: XOR<Company_industriesUpdateWithoutCompanyInput, Company_industriesUncheckedUpdateWithoutCompanyInput>
  }

  export type Company_industriesUpdateManyWithWhereWithoutCompanyInput = {
    where: Company_industriesScalarWhereInput
    data: XOR<Company_industriesUpdateManyMutationInput, Company_industriesUncheckedUpdateManyWithoutCompanyInput>
  }

  export type Company_industriesScalarWhereInput = {
    AND?: Company_industriesScalarWhereInput | Company_industriesScalarWhereInput[]
    OR?: Company_industriesScalarWhereInput[]
    NOT?: Company_industriesScalarWhereInput | Company_industriesScalarWhereInput[]
    companyID?: BigIntFilter<"Company_industries"> | bigint | number
    industry?: StringFilter<"Company_industries"> | string
  }

  export type Company_specialtiesUpsertWithWhereUniqueWithoutCompanyInput = {
    where: Company_specialtiesWhereUniqueInput
    update: XOR<Company_specialtiesUpdateWithoutCompanyInput, Company_specialtiesUncheckedUpdateWithoutCompanyInput>
    create: XOR<Company_specialtiesCreateWithoutCompanyInput, Company_specialtiesUncheckedCreateWithoutCompanyInput>
  }

  export type Company_specialtiesUpdateWithWhereUniqueWithoutCompanyInput = {
    where: Company_specialtiesWhereUniqueInput
    data: XOR<Company_specialtiesUpdateWithoutCompanyInput, Company_specialtiesUncheckedUpdateWithoutCompanyInput>
  }

  export type Company_specialtiesUpdateManyWithWhereWithoutCompanyInput = {
    where: Company_specialtiesScalarWhereInput
    data: XOR<Company_specialtiesUpdateManyMutationInput, Company_specialtiesUncheckedUpdateManyWithoutCompanyInput>
  }

  export type Company_specialtiesScalarWhereInput = {
    AND?: Company_specialtiesScalarWhereInput | Company_specialtiesScalarWhereInput[]
    OR?: Company_specialtiesScalarWhereInput[]
    NOT?: Company_specialtiesScalarWhereInput | Company_specialtiesScalarWhereInput[]
    companyID?: BigIntFilter<"Company_specialties"> | bigint | number
    specialty?: StringFilter<"Company_specialties"> | string
  }

  export type JobPostingsUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobPostingsWhereUniqueInput
    update: XOR<JobPostingsUpdateWithoutCompanyInput, JobPostingsUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobPostingsCreateWithoutCompanyInput, JobPostingsUncheckedCreateWithoutCompanyInput>
  }

  export type JobPostingsUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobPostingsWhereUniqueInput
    data: XOR<JobPostingsUpdateWithoutCompanyInput, JobPostingsUncheckedUpdateWithoutCompanyInput>
  }

  export type JobPostingsUpdateManyWithWhereWithoutCompanyInput = {
    where: JobPostingsScalarWhereInput
    data: XOR<JobPostingsUpdateManyMutationInput, JobPostingsUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobPostingsScalarWhereInput = {
    AND?: JobPostingsScalarWhereInput | JobPostingsScalarWhereInput[]
    OR?: JobPostingsScalarWhereInput[]
    NOT?: JobPostingsScalarWhereInput | JobPostingsScalarWhereInput[]
    jobID?: BigIntFilter<"JobPostings"> | bigint | number
    companyID?: BigIntFilter<"JobPostings"> | bigint | number
    title?: StringFilter<"JobPostings"> | string
    description?: StringNullableFilter<"JobPostings"> | string | null
    salary?: FloatNullableFilter<"JobPostings"> | number | null
    jobPostURL?: StringNullableFilter<"JobPostings"> | string | null
    location?: StringNullableFilter<"JobPostings"> | string | null
    experienceLevel?: StringNullableFilter<"JobPostings"> | string | null
    workType?: StringNullableFilter<"JobPostings"> | string | null
  }

  export type CompanyCreateWithoutIndustriesInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    specialties?: Company_specialtiesCreateNestedManyWithoutCompanyInput
    JobPostings?: JobPostingsCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutIndustriesInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    specialties?: Company_specialtiesUncheckedCreateNestedManyWithoutCompanyInput
    JobPostings?: JobPostingsUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutIndustriesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutIndustriesInput, CompanyUncheckedCreateWithoutIndustriesInput>
  }

  export type CompanyUpsertWithoutIndustriesInput = {
    update: XOR<CompanyUpdateWithoutIndustriesInput, CompanyUncheckedUpdateWithoutIndustriesInput>
    create: XOR<CompanyCreateWithoutIndustriesInput, CompanyUncheckedCreateWithoutIndustriesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutIndustriesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutIndustriesInput, CompanyUncheckedUpdateWithoutIndustriesInput>
  }

  export type CompanyUpdateWithoutIndustriesInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    specialties?: Company_specialtiesUpdateManyWithoutCompanyNestedInput
    JobPostings?: JobPostingsUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutIndustriesInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    specialties?: Company_specialtiesUncheckedUpdateManyWithoutCompanyNestedInput
    JobPostings?: JobPostingsUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutSpecialtiesInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    industries?: Company_industriesCreateNestedManyWithoutCompanyInput
    JobPostings?: JobPostingsCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSpecialtiesInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    industries?: Company_industriesUncheckedCreateNestedManyWithoutCompanyInput
    JobPostings?: JobPostingsUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSpecialtiesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSpecialtiesInput, CompanyUncheckedCreateWithoutSpecialtiesInput>
  }

  export type CompanyUpsertWithoutSpecialtiesInput = {
    update: XOR<CompanyUpdateWithoutSpecialtiesInput, CompanyUncheckedUpdateWithoutSpecialtiesInput>
    create: XOR<CompanyCreateWithoutSpecialtiesInput, CompanyUncheckedCreateWithoutSpecialtiesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSpecialtiesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSpecialtiesInput, CompanyUncheckedUpdateWithoutSpecialtiesInput>
  }

  export type CompanyUpdateWithoutSpecialtiesInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industries?: Company_industriesUpdateManyWithoutCompanyNestedInput
    JobPostings?: JobPostingsUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSpecialtiesInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industries?: Company_industriesUncheckedUpdateManyWithoutCompanyNestedInput
    JobPostings?: JobPostingsUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutJobPostingsInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    industries?: Company_industriesCreateNestedManyWithoutCompanyInput
    specialties?: Company_specialtiesCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutJobPostingsInput = {
    companyID: bigint | number
    name: string
    description?: string | null
    companySize?: string | null
    state?: string | null
    country?: string | null
    address?: string | null
    industries?: Company_industriesUncheckedCreateNestedManyWithoutCompanyInput
    specialties?: Company_specialtiesUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutJobPostingsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
  }

  export type JobPostings_jobSkillsCreateWithoutJobPostingsInput = {
    jobSkills: string
  }

  export type JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput = {
    jobSkills: string
  }

  export type JobPostings_jobSkillsCreateOrConnectWithoutJobPostingsInput = {
    where: JobPostings_jobSkillsWhereUniqueInput
    create: XOR<JobPostings_jobSkillsCreateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput>
  }

  export type JobPostings_jobSkillsCreateManyJobPostingsInputEnvelope = {
    data: JobPostings_jobSkillsCreateManyJobPostingsInput | JobPostings_jobSkillsCreateManyJobPostingsInput[]
    skipDuplicates?: boolean
  }

  export type JobPostings_benefitsCreateWithoutJobPostingsInput = {
    benefits: string
  }

  export type JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput = {
    benefits: string
  }

  export type JobPostings_benefitsCreateOrConnectWithoutJobPostingsInput = {
    where: JobPostings_benefitsWhereUniqueInput
    create: XOR<JobPostings_benefitsCreateWithoutJobPostingsInput, JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput>
  }

  export type JobPostings_benefitsCreateManyJobPostingsInputEnvelope = {
    data: JobPostings_benefitsCreateManyJobPostingsInput | JobPostings_benefitsCreateManyJobPostingsInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutJobPostingsInput = {
    applicationID: bigint | number
    resume?: string | null
    Candidate: CandidateCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutJobPostingsInput = {
    applicationID: bigint | number
    candidateID: bigint | number
    resume?: string | null
  }

  export type ApplicationCreateOrConnectWithoutJobPostingsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobPostingsInput, ApplicationUncheckedCreateWithoutJobPostingsInput>
  }

  export type ApplicationCreateManyJobPostingsInputEnvelope = {
    data: ApplicationCreateManyJobPostingsInput | ApplicationCreateManyJobPostingsInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutJobPostingsInput = {
    update: XOR<CompanyUpdateWithoutJobPostingsInput, CompanyUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobPostingsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobPostingsInput, CompanyUncheckedUpdateWithoutJobPostingsInput>
  }

  export type CompanyUpdateWithoutJobPostingsInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industries?: Company_industriesUpdateManyWithoutCompanyNestedInput
    specialties?: Company_specialtiesUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobPostingsInput = {
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industries?: Company_industriesUncheckedUpdateManyWithoutCompanyNestedInput
    specialties?: Company_specialtiesUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type JobPostings_jobSkillsUpsertWithWhereUniqueWithoutJobPostingsInput = {
    where: JobPostings_jobSkillsWhereUniqueInput
    update: XOR<JobPostings_jobSkillsUpdateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<JobPostings_jobSkillsCreateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedCreateWithoutJobPostingsInput>
  }

  export type JobPostings_jobSkillsUpdateWithWhereUniqueWithoutJobPostingsInput = {
    where: JobPostings_jobSkillsWhereUniqueInput
    data: XOR<JobPostings_jobSkillsUpdateWithoutJobPostingsInput, JobPostings_jobSkillsUncheckedUpdateWithoutJobPostingsInput>
  }

  export type JobPostings_jobSkillsUpdateManyWithWhereWithoutJobPostingsInput = {
    where: JobPostings_jobSkillsScalarWhereInput
    data: XOR<JobPostings_jobSkillsUpdateManyMutationInput, JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsInput>
  }

  export type JobPostings_jobSkillsScalarWhereInput = {
    AND?: JobPostings_jobSkillsScalarWhereInput | JobPostings_jobSkillsScalarWhereInput[]
    OR?: JobPostings_jobSkillsScalarWhereInput[]
    NOT?: JobPostings_jobSkillsScalarWhereInput | JobPostings_jobSkillsScalarWhereInput[]
    jobID?: BigIntFilter<"JobPostings_jobSkills"> | bigint | number
    jobSkills?: StringFilter<"JobPostings_jobSkills"> | string
  }

  export type JobPostings_benefitsUpsertWithWhereUniqueWithoutJobPostingsInput = {
    where: JobPostings_benefitsWhereUniqueInput
    update: XOR<JobPostings_benefitsUpdateWithoutJobPostingsInput, JobPostings_benefitsUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<JobPostings_benefitsCreateWithoutJobPostingsInput, JobPostings_benefitsUncheckedCreateWithoutJobPostingsInput>
  }

  export type JobPostings_benefitsUpdateWithWhereUniqueWithoutJobPostingsInput = {
    where: JobPostings_benefitsWhereUniqueInput
    data: XOR<JobPostings_benefitsUpdateWithoutJobPostingsInput, JobPostings_benefitsUncheckedUpdateWithoutJobPostingsInput>
  }

  export type JobPostings_benefitsUpdateManyWithWhereWithoutJobPostingsInput = {
    where: JobPostings_benefitsScalarWhereInput
    data: XOR<JobPostings_benefitsUpdateManyMutationInput, JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsInput>
  }

  export type JobPostings_benefitsScalarWhereInput = {
    AND?: JobPostings_benefitsScalarWhereInput | JobPostings_benefitsScalarWhereInput[]
    OR?: JobPostings_benefitsScalarWhereInput[]
    NOT?: JobPostings_benefitsScalarWhereInput | JobPostings_benefitsScalarWhereInput[]
    jobID?: BigIntFilter<"JobPostings_benefits"> | bigint | number
    benefits?: StringFilter<"JobPostings_benefits"> | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobPostingsInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobPostingsInput, ApplicationUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<ApplicationCreateWithoutJobPostingsInput, ApplicationUncheckedCreateWithoutJobPostingsInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobPostingsInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobPostingsInput, ApplicationUncheckedUpdateWithoutJobPostingsInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobPostingsInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobPostingsInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    applicationID?: BigIntFilter<"Application"> | bigint | number
    candidateID?: BigIntFilter<"Application"> | bigint | number
    jobID?: BigIntFilter<"Application"> | bigint | number
    resume?: StringNullableFilter<"Application"> | string | null
  }

  export type JobPostingsCreateWithoutJobSkillsInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    Company: CompanyCreateNestedOneWithoutJobPostingsInput
    benefits?: JobPostings_benefitsCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsUncheckedCreateWithoutJobSkillsInput = {
    jobID: bigint | number
    companyID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    benefits?: JobPostings_benefitsUncheckedCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsCreateOrConnectWithoutJobSkillsInput = {
    where: JobPostingsWhereUniqueInput
    create: XOR<JobPostingsCreateWithoutJobSkillsInput, JobPostingsUncheckedCreateWithoutJobSkillsInput>
  }

  export type JobPostingsUpsertWithoutJobSkillsInput = {
    update: XOR<JobPostingsUpdateWithoutJobSkillsInput, JobPostingsUncheckedUpdateWithoutJobSkillsInput>
    create: XOR<JobPostingsCreateWithoutJobSkillsInput, JobPostingsUncheckedCreateWithoutJobSkillsInput>
    where?: JobPostingsWhereInput
  }

  export type JobPostingsUpdateToOneWithWhereWithoutJobSkillsInput = {
    where?: JobPostingsWhereInput
    data: XOR<JobPostingsUpdateWithoutJobSkillsInput, JobPostingsUncheckedUpdateWithoutJobSkillsInput>
  }

  export type JobPostingsUpdateWithoutJobSkillsInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: CompanyUpdateOneRequiredWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsUncheckedUpdateWithoutJobSkillsInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    benefits?: JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsCreateWithoutBenefitsInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    Company: CompanyCreateNestedOneWithoutJobPostingsInput
    jobSkills?: JobPostings_jobSkillsCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsUncheckedCreateWithoutBenefitsInput = {
    jobID: bigint | number
    companyID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    jobSkills?: JobPostings_jobSkillsUncheckedCreateNestedManyWithoutJobPostingsInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsCreateOrConnectWithoutBenefitsInput = {
    where: JobPostingsWhereUniqueInput
    create: XOR<JobPostingsCreateWithoutBenefitsInput, JobPostingsUncheckedCreateWithoutBenefitsInput>
  }

  export type JobPostingsUpsertWithoutBenefitsInput = {
    update: XOR<JobPostingsUpdateWithoutBenefitsInput, JobPostingsUncheckedUpdateWithoutBenefitsInput>
    create: XOR<JobPostingsCreateWithoutBenefitsInput, JobPostingsUncheckedCreateWithoutBenefitsInput>
    where?: JobPostingsWhereInput
  }

  export type JobPostingsUpdateToOneWithWhereWithoutBenefitsInput = {
    where?: JobPostingsWhereInput
    data: XOR<JobPostingsUpdateWithoutBenefitsInput, JobPostingsUncheckedUpdateWithoutBenefitsInput>
  }

  export type JobPostingsUpdateWithoutBenefitsInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: CompanyUpdateOneRequiredWithoutJobPostingsNestedInput
    jobSkills?: JobPostings_jobSkillsUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsUncheckedUpdateWithoutBenefitsInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    jobSkills?: JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutJobPostingsNestedInput
  }

  export type Candidate_mobileNumberCreateWithoutCandidateInput = {
    mobileNumber: string
  }

  export type Candidate_mobileNumberUncheckedCreateWithoutCandidateInput = {
    mobileNumber: string
  }

  export type Candidate_mobileNumberCreateOrConnectWithoutCandidateInput = {
    where: Candidate_mobileNumberWhereUniqueInput
    create: XOR<Candidate_mobileNumberCreateWithoutCandidateInput, Candidate_mobileNumberUncheckedCreateWithoutCandidateInput>
  }

  export type Candidate_mobileNumberCreateManyCandidateInputEnvelope = {
    data: Candidate_mobileNumberCreateManyCandidateInput | Candidate_mobileNumberCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type Candidate_candidateSkillsCreateWithoutCandidateInput = {
    candidateSkills: string
  }

  export type Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput = {
    candidateSkills: string
  }

  export type Candidate_candidateSkillsCreateOrConnectWithoutCandidateInput = {
    where: Candidate_candidateSkillsWhereUniqueInput
    create: XOR<Candidate_candidateSkillsCreateWithoutCandidateInput, Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput>
  }

  export type Candidate_candidateSkillsCreateManyCandidateInputEnvelope = {
    data: Candidate_candidateSkillsCreateManyCandidateInput | Candidate_candidateSkillsCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutCandidateInput = {
    applicationID: bigint | number
    resume?: string | null
    JobPostings: JobPostingsCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutCandidateInput = {
    applicationID: bigint | number
    jobID: bigint | number
    resume?: string | null
  }

  export type ApplicationCreateOrConnectWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationCreateManyCandidateInputEnvelope = {
    data: ApplicationCreateManyCandidateInput | ApplicationCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type Candidate_mobileNumberUpsertWithWhereUniqueWithoutCandidateInput = {
    where: Candidate_mobileNumberWhereUniqueInput
    update: XOR<Candidate_mobileNumberUpdateWithoutCandidateInput, Candidate_mobileNumberUncheckedUpdateWithoutCandidateInput>
    create: XOR<Candidate_mobileNumberCreateWithoutCandidateInput, Candidate_mobileNumberUncheckedCreateWithoutCandidateInput>
  }

  export type Candidate_mobileNumberUpdateWithWhereUniqueWithoutCandidateInput = {
    where: Candidate_mobileNumberWhereUniqueInput
    data: XOR<Candidate_mobileNumberUpdateWithoutCandidateInput, Candidate_mobileNumberUncheckedUpdateWithoutCandidateInput>
  }

  export type Candidate_mobileNumberUpdateManyWithWhereWithoutCandidateInput = {
    where: Candidate_mobileNumberScalarWhereInput
    data: XOR<Candidate_mobileNumberUpdateManyMutationInput, Candidate_mobileNumberUncheckedUpdateManyWithoutCandidateInput>
  }

  export type Candidate_mobileNumberScalarWhereInput = {
    AND?: Candidate_mobileNumberScalarWhereInput | Candidate_mobileNumberScalarWhereInput[]
    OR?: Candidate_mobileNumberScalarWhereInput[]
    NOT?: Candidate_mobileNumberScalarWhereInput | Candidate_mobileNumberScalarWhereInput[]
    candidateID?: BigIntFilter<"Candidate_mobileNumber"> | bigint | number
    mobileNumber?: StringFilter<"Candidate_mobileNumber"> | string
  }

  export type Candidate_candidateSkillsUpsertWithWhereUniqueWithoutCandidateInput = {
    where: Candidate_candidateSkillsWhereUniqueInput
    update: XOR<Candidate_candidateSkillsUpdateWithoutCandidateInput, Candidate_candidateSkillsUncheckedUpdateWithoutCandidateInput>
    create: XOR<Candidate_candidateSkillsCreateWithoutCandidateInput, Candidate_candidateSkillsUncheckedCreateWithoutCandidateInput>
  }

  export type Candidate_candidateSkillsUpdateWithWhereUniqueWithoutCandidateInput = {
    where: Candidate_candidateSkillsWhereUniqueInput
    data: XOR<Candidate_candidateSkillsUpdateWithoutCandidateInput, Candidate_candidateSkillsUncheckedUpdateWithoutCandidateInput>
  }

  export type Candidate_candidateSkillsUpdateManyWithWhereWithoutCandidateInput = {
    where: Candidate_candidateSkillsScalarWhereInput
    data: XOR<Candidate_candidateSkillsUpdateManyMutationInput, Candidate_candidateSkillsUncheckedUpdateManyWithoutCandidateInput>
  }

  export type Candidate_candidateSkillsScalarWhereInput = {
    AND?: Candidate_candidateSkillsScalarWhereInput | Candidate_candidateSkillsScalarWhereInput[]
    OR?: Candidate_candidateSkillsScalarWhereInput[]
    NOT?: Candidate_candidateSkillsScalarWhereInput | Candidate_candidateSkillsScalarWhereInput[]
    candidateID?: BigIntFilter<"Candidate_candidateSkills"> | bigint | number
    candidateSkills?: StringFilter<"Candidate_candidateSkills"> | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutCandidateInput, ApplicationUncheckedUpdateWithoutCandidateInput>
    create: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutCandidateInput, ApplicationUncheckedUpdateWithoutCandidateInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutCandidateInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CandidateCreateWithoutMobileNumbersInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    candidateSkills?: Candidate_candidateSkillsCreateNestedManyWithoutCandidateInput
    Applications?: ApplicationCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutMobileNumbersInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    candidateSkills?: Candidate_candidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutMobileNumbersInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutMobileNumbersInput, CandidateUncheckedCreateWithoutMobileNumbersInput>
  }

  export type CandidateUpsertWithoutMobileNumbersInput = {
    update: XOR<CandidateUpdateWithoutMobileNumbersInput, CandidateUncheckedUpdateWithoutMobileNumbersInput>
    create: XOR<CandidateCreateWithoutMobileNumbersInput, CandidateUncheckedCreateWithoutMobileNumbersInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutMobileNumbersInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutMobileNumbersInput, CandidateUncheckedUpdateWithoutMobileNumbersInput>
  }

  export type CandidateUpdateWithoutMobileNumbersInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    candidateSkills?: Candidate_candidateSkillsUpdateManyWithoutCandidateNestedInput
    Applications?: ApplicationUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutMobileNumbersInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    candidateSkills?: Candidate_candidateSkillsUncheckedUpdateManyWithoutCandidateNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutCandidateSkillsInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    mobileNumbers?: Candidate_mobileNumberCreateNestedManyWithoutCandidateInput
    Applications?: ApplicationCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutCandidateSkillsInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    mobileNumbers?: Candidate_mobileNumberUncheckedCreateNestedManyWithoutCandidateInput
    Applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutCandidateSkillsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutCandidateSkillsInput, CandidateUncheckedCreateWithoutCandidateSkillsInput>
  }

  export type CandidateUpsertWithoutCandidateSkillsInput = {
    update: XOR<CandidateUpdateWithoutCandidateSkillsInput, CandidateUncheckedUpdateWithoutCandidateSkillsInput>
    create: XOR<CandidateCreateWithoutCandidateSkillsInput, CandidateUncheckedCreateWithoutCandidateSkillsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutCandidateSkillsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutCandidateSkillsInput, CandidateUncheckedUpdateWithoutCandidateSkillsInput>
  }

  export type CandidateUpdateWithoutCandidateSkillsInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    mobileNumbers?: Candidate_mobileNumberUpdateManyWithoutCandidateNestedInput
    Applications?: ApplicationUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutCandidateSkillsInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    mobileNumbers?: Candidate_mobileNumberUncheckedUpdateManyWithoutCandidateNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutApplicationsInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    mobileNumbers?: Candidate_mobileNumberCreateNestedManyWithoutCandidateInput
    candidateSkills?: Candidate_candidateSkillsCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutApplicationsInput = {
    candidateID?: bigint | number
    fullName: string
    email: string
    passwordHash: string
    mobileNumbers?: Candidate_mobileNumberUncheckedCreateNestedManyWithoutCandidateInput
    candidateSkills?: Candidate_candidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutApplicationsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
  }

  export type JobPostingsCreateWithoutApplicationsInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    Company: CompanyCreateNestedOneWithoutJobPostingsInput
    jobSkills?: JobPostings_jobSkillsCreateNestedManyWithoutJobPostingsInput
    benefits?: JobPostings_benefitsCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsUncheckedCreateWithoutApplicationsInput = {
    jobID: bigint | number
    companyID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
    jobSkills?: JobPostings_jobSkillsUncheckedCreateNestedManyWithoutJobPostingsInput
    benefits?: JobPostings_benefitsUncheckedCreateNestedManyWithoutJobPostingsInput
  }

  export type JobPostingsCreateOrConnectWithoutApplicationsInput = {
    where: JobPostingsWhereUniqueInput
    create: XOR<JobPostingsCreateWithoutApplicationsInput, JobPostingsUncheckedCreateWithoutApplicationsInput>
  }

  export type CandidateUpsertWithoutApplicationsInput = {
    update: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type CandidateUpdateWithoutApplicationsInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    mobileNumbers?: Candidate_mobileNumberUpdateManyWithoutCandidateNestedInput
    candidateSkills?: Candidate_candidateSkillsUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutApplicationsInput = {
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    mobileNumbers?: Candidate_mobileNumberUncheckedUpdateManyWithoutCandidateNestedInput
    candidateSkills?: Candidate_candidateSkillsUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type JobPostingsUpsertWithoutApplicationsInput = {
    update: XOR<JobPostingsUpdateWithoutApplicationsInput, JobPostingsUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobPostingsCreateWithoutApplicationsInput, JobPostingsUncheckedCreateWithoutApplicationsInput>
    where?: JobPostingsWhereInput
  }

  export type JobPostingsUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobPostingsWhereInput
    data: XOR<JobPostingsUpdateWithoutApplicationsInput, JobPostingsUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobPostingsUpdateWithoutApplicationsInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: CompanyUpdateOneRequiredWithoutJobPostingsNestedInput
    jobSkills?: JobPostings_jobSkillsUpdateManyWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsUncheckedUpdateWithoutApplicationsInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    companyID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    jobSkills?: JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsNestedInput
  }

  export type Company_industriesCreateManyCompanyInput = {
    industry: string
  }

  export type Company_specialtiesCreateManyCompanyInput = {
    specialty: string
  }

  export type JobPostingsCreateManyCompanyInput = {
    jobID: bigint | number
    title: string
    description?: string | null
    salary?: number | null
    jobPostURL?: string | null
    location?: string | null
    experienceLevel?: string | null
    workType?: string | null
  }

  export type Company_industriesUpdateWithoutCompanyInput = {
    industry?: StringFieldUpdateOperationsInput | string
  }

  export type Company_industriesUncheckedUpdateWithoutCompanyInput = {
    industry?: StringFieldUpdateOperationsInput | string
  }

  export type Company_industriesUncheckedUpdateManyWithoutCompanyInput = {
    industry?: StringFieldUpdateOperationsInput | string
  }

  export type Company_specialtiesUpdateWithoutCompanyInput = {
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type Company_specialtiesUncheckedUpdateWithoutCompanyInput = {
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type Company_specialtiesUncheckedUpdateManyWithoutCompanyInput = {
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostingsUpdateWithoutCompanyInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    jobSkills?: JobPostings_jobSkillsUpdateManyWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsUncheckedUpdateWithoutCompanyInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
    jobSkills?: JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsNestedInput
    benefits?: JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsNestedInput
    Applications?: ApplicationUncheckedUpdateManyWithoutJobPostingsNestedInput
  }

  export type JobPostingsUncheckedUpdateManyWithoutCompanyInput = {
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    jobPostURL?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    workType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostings_jobSkillsCreateManyJobPostingsInput = {
    jobSkills: string
  }

  export type JobPostings_benefitsCreateManyJobPostingsInput = {
    benefits: string
  }

  export type ApplicationCreateManyJobPostingsInput = {
    applicationID: bigint | number
    candidateID: bigint | number
    resume?: string | null
  }

  export type JobPostings_jobSkillsUpdateWithoutJobPostingsInput = {
    jobSkills?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_jobSkillsUncheckedUpdateWithoutJobPostingsInput = {
    jobSkills?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_jobSkillsUncheckedUpdateManyWithoutJobPostingsInput = {
    jobSkills?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_benefitsUpdateWithoutJobPostingsInput = {
    benefits?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_benefitsUncheckedUpdateWithoutJobPostingsInput = {
    benefits?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostings_benefitsUncheckedUpdateManyWithoutJobPostingsInput = {
    benefits?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationUpdateWithoutJobPostingsInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    Candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobPostingsInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyWithoutJobPostingsInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    candidateID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Candidate_mobileNumberCreateManyCandidateInput = {
    mobileNumber: string
  }

  export type Candidate_candidateSkillsCreateManyCandidateInput = {
    candidateSkills: string
  }

  export type ApplicationCreateManyCandidateInput = {
    applicationID: bigint | number
    jobID: bigint | number
    resume?: string | null
  }

  export type Candidate_mobileNumberUpdateWithoutCandidateInput = {
    mobileNumber?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_mobileNumberUncheckedUpdateWithoutCandidateInput = {
    mobileNumber?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_mobileNumberUncheckedUpdateManyWithoutCandidateInput = {
    mobileNumber?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_candidateSkillsUpdateWithoutCandidateInput = {
    candidateSkills?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_candidateSkillsUncheckedUpdateWithoutCandidateInput = {
    candidateSkills?: StringFieldUpdateOperationsInput | string
  }

  export type Candidate_candidateSkillsUncheckedUpdateManyWithoutCandidateInput = {
    candidateSkills?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationUpdateWithoutCandidateInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    JobPostings?: JobPostingsUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCandidateInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyWithoutCandidateInput = {
    applicationID?: BigIntFieldUpdateOperationsInput | bigint | number
    jobID?: BigIntFieldUpdateOperationsInput | bigint | number
    resume?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobPostingsCountOutputTypeDefaultArgs instead
     */
    export type JobPostingsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobPostingsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidateCountOutputTypeDefaultArgs instead
     */
    export type CandidateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Company_industriesDefaultArgs instead
     */
    export type Company_industriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Company_industriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Company_specialtiesDefaultArgs instead
     */
    export type Company_specialtiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Company_specialtiesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobPostingsDefaultArgs instead
     */
    export type JobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobPostingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobPostings_jobSkillsDefaultArgs instead
     */
    export type JobPostings_jobSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobPostings_jobSkillsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobPostings_benefitsDefaultArgs instead
     */
    export type JobPostings_benefitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobPostings_benefitsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidateDefaultArgs instead
     */
    export type CandidateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Candidate_mobileNumberDefaultArgs instead
     */
    export type Candidate_mobileNumberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Candidate_mobileNumberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Candidate_candidateSkillsDefaultArgs instead
     */
    export type Candidate_candidateSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Candidate_candidateSkillsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationDefaultArgs instead
     */
    export type ApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}